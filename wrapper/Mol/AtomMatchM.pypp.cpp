// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "AtomMatchM.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/errors.h"

#include "SireMol/core.h"

#include "SireMol/errors.h"

#include "SireMol/mover_metaid.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "atommatch.h"

#include "atommatch.h"

SireMol::AtomMatchM __copy__(const SireMol::AtomMatchM &other){ return SireMol::AtomMatchM(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_AtomMatchM_class(){

    { //::SireMol::AtomMatchM
        typedef bp::class_< SireMol::AtomMatchM, bp::bases< SireBase::Property > > AtomMatchM_exposer_t;
        AtomMatchM_exposer_t AtomMatchM_exposer = AtomMatchM_exposer_t( "AtomMatchM", "This class holds the result of performing a match on multiple\nmolecules", bp::init< >("") );
        bp::scope AtomMatchM_scope( AtomMatchM_exposer );
        AtomMatchM_exposer.def( bp::init< SireMol::AtomMatch const & >(( bp::arg("match") ), "") );
        AtomMatchM_exposer.def( bp::init< QList< SireMol::AtomMatch > const & >(( bp::arg("matches") ), "") );
        AtomMatchM_exposer.def( bp::init< SireMol::SelectResult const & >(( bp::arg("mols") ), "") );
        AtomMatchM_exposer.def( bp::init< SireMol::AtomMatchM const & >(( bp::arg("other") ), "") );
        { //::SireMol::AtomMatchM::group
        
            typedef ::SireMol::Selector< SireMol::Atom > ( ::SireMol::AtomMatchM::*group_function_type)( int ) const;
            group_function_type group_function_value( &::SireMol::AtomMatchM::group );
            
            AtomMatchM_exposer.def( 
                "group"
                , group_function_value
                , ( bp::arg("i") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::AtomMatchM::groups
        
            typedef ::QList< SireMol::Selector< SireMol::Atom > > ( ::SireMol::AtomMatchM::*groups_function_type)(  ) const;
            groups_function_type groups_function_value( &::SireMol::AtomMatchM::groups );
            
            AtomMatchM_exposer.def( 
                "groups"
                , groups_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::AtomMatchM::isEmpty
        
            typedef bool ( ::SireMol::AtomMatchM::*isEmpty_function_type)(  ) const;
            isEmpty_function_type isEmpty_function_value( &::SireMol::AtomMatchM::isEmpty );
            
            AtomMatchM_exposer.def( 
                "isEmpty"
                , isEmpty_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::AtomMatchM::nGroups
        
            typedef int ( ::SireMol::AtomMatchM::*nGroups_function_type)(  ) const;
            nGroups_function_type nGroups_function_value( &::SireMol::AtomMatchM::nGroups );
            
            AtomMatchM_exposer.def( 
                "nGroups"
                , nGroups_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        AtomMatchM_exposer.def( bp::self != bp::self );
        { //::SireMol::AtomMatchM::operator=
        
            typedef ::SireMol::AtomMatchM & ( ::SireMol::AtomMatchM::*assign_function_type)( ::SireMol::AtomMatchM const & ) ;
            assign_function_type assign_function_value( &::SireMol::AtomMatchM::operator= );
            
            AtomMatchM_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        AtomMatchM_exposer.def( bp::self == bp::self );
        { //::SireMol::AtomMatchM::toString
        
            typedef ::QString ( ::SireMol::AtomMatchM::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMol::AtomMatchM::toString );
            
            AtomMatchM_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::AtomMatchM::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMol::AtomMatchM::typeName );
            
            AtomMatchM_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMol::AtomMatchM::what
        
            typedef char const * ( ::SireMol::AtomMatchM::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMol::AtomMatchM::what );
            
            AtomMatchM_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        AtomMatchM_exposer.staticmethod( "typeName" );
        AtomMatchM_exposer.def( "__copy__", &__copy__);
        AtomMatchM_exposer.def( "__deepcopy__", &__copy__);
        AtomMatchM_exposer.def( "clone", &__copy__);
        AtomMatchM_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMol::AtomMatchM >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomMatchM_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMol::AtomMatchM >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        AtomMatchM_exposer.def_pickle(sire_pickle_suite< ::SireMol::AtomMatchM >());
        AtomMatchM_exposer.def( "__str__", &__str__< ::SireMol::AtomMatchM > );
        AtomMatchM_exposer.def( "__repr__", &__str__< ::SireMol::AtomMatchM > );
    }

}
