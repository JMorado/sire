// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "TransformedSpace.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/countflops.h"

#include "SireError/errors.h"

#include "SireMaths/align.h"

#include "SireMaths/rangenerator.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireVol/errors.h"

#include "coordgroup.h"

#include "transformedspace.h"

#include <QDebug>

#include "transformedspace.h"

SireVol::TransformedSpace __copy__(const SireVol::TransformedSpace &other){ return SireVol::TransformedSpace(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_TransformedSpace_class(){

    { //::SireVol::TransformedSpace
        typedef bp::class_< SireVol::TransformedSpace, bp::bases< SireVol::Space, SireBase::Property > > TransformedSpace_exposer_t;
        TransformedSpace_exposer_t TransformedSpace_exposer = TransformedSpace_exposer_t( "TransformedSpace", "\nThis class overloads Space to provide a transformed (translated andor\nrotated) version of any of the other Space classes\n", bp::init< >("Construct a default TransformedSpace volume") );
        bp::scope TransformedSpace_scope( TransformedSpace_exposer );
        TransformedSpace_exposer.def( bp::init< SireVol::Space const &, SireMaths::Transform const & >(( bp::arg("space"), bp::arg("transform") ), "Construct to represent space transformed by the passed transform") );
        TransformedSpace_exposer.def( bp::init< SireVol::TransformedSpace const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireVol::TransformedSpace::beyond
        
            typedef bool ( ::SireVol::TransformedSpace::*beyond_function_type)( double,::SireVol::AABox const &,::SireVol::AABox const & ) const;
            beyond_function_type beyond_function_value( &::SireVol::TransformedSpace::beyond );
            
            TransformedSpace_exposer.def( 
                "beyond"
                , beyond_function_value
                , ( bp::arg("dist"), bp::arg("aabox0"), bp::arg("aabox1") )
                , bp::release_gil_policy()
                , "Return whether or not two groups enclosed by the AABoxes aabox0\nand aabox1 are definitely beyond the cutoff distance" );
        
        }
        { //::SireVol::TransformedSpace::beyond
        
            typedef bool ( ::SireVol::TransformedSpace::*beyond_function_type)( double,::SireVol::CoordGroup const &,::SireVol::CoordGroup const & ) const;
            beyond_function_type beyond_function_value( &::SireVol::TransformedSpace::beyond );
            
            TransformedSpace_exposer.def( 
                "beyond"
                , beyond_function_value
                , ( bp::arg("dist"), bp::arg("group0"), bp::arg("group1") )
                , bp::release_gil_policy()
                , "Return whether or not these two groups are definitely beyond the cutoff distance." );
        
        }
        { //::SireVol::TransformedSpace::calcAngle
        
            typedef ::SireUnits::Dimension::Angle ( ::SireVol::TransformedSpace::*calcAngle_function_type)( ::SireMaths::Vector const &,::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            calcAngle_function_type calcAngle_function_value( &::SireVol::TransformedSpace::calcAngle );
            
            TransformedSpace_exposer.def( 
                "calcAngle"
                , calcAngle_function_value
                , ( bp::arg("point0"), bp::arg("point1"), bp::arg("point2") )
                , bp::release_gil_policy()
                , "Calculate the angle between the passed three points. This should return\nthe acute angle between the points, which should lie between 0 and 180 degrees" );
        
        }
        { //::SireVol::TransformedSpace::calcDihedral
        
            typedef ::SireUnits::Dimension::Angle ( ::SireVol::TransformedSpace::*calcDihedral_function_type)( ::SireMaths::Vector const &,::SireMaths::Vector const &,::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            calcDihedral_function_type calcDihedral_function_value( &::SireVol::TransformedSpace::calcDihedral );
            
            TransformedSpace_exposer.def( 
                "calcDihedral"
                , calcDihedral_function_value
                , ( bp::arg("point0"), bp::arg("point1"), bp::arg("point2"), bp::arg("point3") )
                , bp::release_gil_policy()
                , "Calculate the torsion angle between the passed four points. This should\nreturn the torsion angle measured clockwise when looking down the\ntorsion from point0-point1-point2-point3. This will lie between 0 and 360\ndegrees" );
        
        }
        { //::SireVol::TransformedSpace::calcDist
        
            typedef double ( ::SireVol::TransformedSpace::*calcDist_function_type)( ::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            calcDist_function_type calcDist_function_value( &::SireVol::TransformedSpace::calcDist );
            
            TransformedSpace_exposer.def( 
                "calcDist"
                , calcDist_function_value
                , ( bp::arg("point0"), bp::arg("point1") )
                , bp::release_gil_policy()
                , "Calculate the distance between two points" );
        
        }
        { //::SireVol::TransformedSpace::calcDist
        
            typedef double ( ::SireVol::TransformedSpace::*calcDist_function_type)( ::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcDist_function_type calcDist_function_value( &::SireVol::TransformedSpace::calcDist );
            
            TransformedSpace_exposer.def( 
                "calcDist"
                , calcDist_function_value
                , ( bp::arg("group"), bp::arg("mat") )
                , bp::release_gil_policy()
                , "Populate the matrix mat with the distances between all points in\nthe group group. Return the shortest distance between points." );
        
        }
        { //::SireVol::TransformedSpace::calcDist
        
            typedef double ( ::SireVol::TransformedSpace::*calcDist_function_type)( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcDist_function_type calcDist_function_value( &::SireVol::TransformedSpace::calcDist );
            
            TransformedSpace_exposer.def( 
                "calcDist"
                , calcDist_function_value
                , ( bp::arg("group1"), bp::arg("group2"), bp::arg("mat") )
                , bp::release_gil_policy()
                , "Populate the matrix mat with the distances between all of the\npoints of the two CoordGroups. Return the shortest distance between the two\nCoordGroups." );
        
        }
        { //::SireVol::TransformedSpace::calcDist
        
            typedef double ( ::SireVol::TransformedSpace::*calcDist_function_type)( ::SireVol::CoordGroup const &,::SireMaths::Vector const &,::SireVol::DistMatrix & ) const;
            calcDist_function_type calcDist_function_value( &::SireVol::TransformedSpace::calcDist );
            
            TransformedSpace_exposer.def( 
                "calcDist"
                , calcDist_function_value
                , ( bp::arg("group"), bp::arg("point"), bp::arg("mat") )
                , bp::release_gil_policy()
                , "Populate the matrix mat with the distances between all of the\npoints of the passed CoordGroup and point. Returns the shortest distance." );
        
        }
        { //::SireVol::TransformedSpace::calcDist2
        
            typedef double ( ::SireVol::TransformedSpace::*calcDist2_function_type)( ::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            calcDist2_function_type calcDist2_function_value( &::SireVol::TransformedSpace::calcDist2 );
            
            TransformedSpace_exposer.def( 
                "calcDist2"
                , calcDist2_function_value
                , ( bp::arg("point0"), bp::arg("point1") )
                , bp::release_gil_policy()
                , "Calculate the distance squared between two points" );
        
        }
        { //::SireVol::TransformedSpace::calcDist2
        
            typedef double ( ::SireVol::TransformedSpace::*calcDist2_function_type)( ::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcDist2_function_type calcDist2_function_value( &::SireVol::TransformedSpace::calcDist2 );
            
            TransformedSpace_exposer.def( 
                "calcDist2"
                , calcDist2_function_value
                , ( bp::arg("group"), bp::arg("mat") )
                , bp::release_gil_policy()
                , "Populate the matrix mat with the distances^2 between all points in\nthe group group. Return the shortest distance between points." );
        
        }
        { //::SireVol::TransformedSpace::calcDist2
        
            typedef double ( ::SireVol::TransformedSpace::*calcDist2_function_type)( ::SireVol::CoordGroup const &,::SireMaths::Vector const &,::SireVol::DistMatrix & ) const;
            calcDist2_function_type calcDist2_function_value( &::SireVol::TransformedSpace::calcDist2 );
            
            TransformedSpace_exposer.def( 
                "calcDist2"
                , calcDist2_function_value
                , ( bp::arg("group"), bp::arg("point"), bp::arg("mat") )
                , bp::release_gil_policy()
                , "Populate the matrix mat with the distances between all of the\npoints of the passed CoordGroup and point. Returns the shortest distance." );
        
        }
        { //::SireVol::TransformedSpace::calcDist2
        
            typedef double ( ::SireVol::TransformedSpace::*calcDist2_function_type)( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcDist2_function_type calcDist2_function_value( &::SireVol::TransformedSpace::calcDist2 );
            
            TransformedSpace_exposer.def( 
                "calcDist2"
                , calcDist2_function_value
                , ( bp::arg("group1"), bp::arg("group2"), bp::arg("mat") )
                , bp::release_gil_policy()
                , "Populate the matrix mat with the distances^2 between all of the\npoints of the two CoordGroups. Return the shortest distance between the\ntwo CoordGroups." );
        
        }
        { //::SireVol::TransformedSpace::calcDistVector
        
            typedef ::SireMaths::DistVector ( ::SireVol::TransformedSpace::*calcDistVector_function_type)( ::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            calcDistVector_function_type calcDistVector_function_value( &::SireVol::TransformedSpace::calcDistVector );
            
            TransformedSpace_exposer.def( 
                "calcDistVector"
                , calcDistVector_function_value
                , ( bp::arg("point0"), bp::arg("point1") )
                , bp::release_gil_policy()
                , "Calculate the distance vector between two points" );
        
        }
        { //::SireVol::TransformedSpace::calcDistVectors
        
            typedef double ( ::SireVol::TransformedSpace::*calcDistVectors_function_type)( ::SireVol::CoordGroup const &,::SireVol::DistVectorMatrix & ) const;
            calcDistVectors_function_type calcDistVectors_function_value( &::SireVol::TransformedSpace::calcDistVectors );
            
            TransformedSpace_exposer.def( 
                "calcDistVectors"
                , calcDistVectors_function_value
                , ( bp::arg("group"), bp::arg("distmat") )
                , bp::release_gil_policy()
                , "Populate the matrix distmat with all of the interpoint distance vectors\nbetween all points within the CoordGroup. This is not a symmetrical matrix,\nas the direction from point A to point B is the negative of the\ndirection from point B to point A. This returns the shortest distance\nbetween two points in the group (that is not the self-self distance)" );
        
        }
        { //::SireVol::TransformedSpace::calcDistVectors
        
            typedef double ( ::SireVol::TransformedSpace::*calcDistVectors_function_type)( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,::SireVol::DistVectorMatrix & ) const;
            calcDistVectors_function_type calcDistVectors_function_value( &::SireVol::TransformedSpace::calcDistVectors );
            
            TransformedSpace_exposer.def( 
                "calcDistVectors"
                , calcDistVectors_function_value
                , ( bp::arg("group1"), bp::arg("group2"), bp::arg("distmat") )
                , bp::release_gil_policy()
                , "Populate the matrix distmat between all the points of the two CoordGroups\ngroup1 and group2 - the returned matrix has the vectors pointing\nfrom each point in group1 to each point in group2. This returns\nthe shortest distance between two points in the group" );
        
        }
        { //::SireVol::TransformedSpace::calcDistVectors
        
            typedef double ( ::SireVol::TransformedSpace::*calcDistVectors_function_type)( ::SireVol::CoordGroup const &,::SireMaths::Vector const &,::SireVol::DistVectorMatrix & ) const;
            calcDistVectors_function_type calcDistVectors_function_value( &::SireVol::TransformedSpace::calcDistVectors );
            
            TransformedSpace_exposer.def( 
                "calcDistVectors"
                , calcDistVectors_function_value
                , ( bp::arg("group"), bp::arg("point"), bp::arg("distmat") )
                , bp::release_gil_policy()
                , "Populate the matrix distmat between all the points of the passed\nCoordGroup with point - the returned matrix has the vectors pointing\nfrom the point, to each point in group. This returns the shortest distance." );
        
        }
        { //::SireVol::TransformedSpace::calcInvDist
        
            typedef double ( ::SireVol::TransformedSpace::*calcInvDist_function_type)( ::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcInvDist_function_type calcInvDist_function_value( &::SireVol::TransformedSpace::calcInvDist );
            
            TransformedSpace_exposer.def( 
                "calcInvDist"
                , calcInvDist_function_value
                , ( bp::arg("group"), bp::arg("mat") )
                , bp::release_gil_policy()
                , "Populate the matrix mat with the inverse distances between all points in\nthe group group. Return the smallest distance between points." );
        
        }
        { //::SireVol::TransformedSpace::calcInvDist
        
            typedef double ( ::SireVol::TransformedSpace::*calcInvDist_function_type)( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcInvDist_function_type calcInvDist_function_value( &::SireVol::TransformedSpace::calcInvDist );
            
            TransformedSpace_exposer.def( 
                "calcInvDist"
                , calcInvDist_function_value
                , ( bp::arg("group1"), bp::arg("group2"), bp::arg("mat") )
                , bp::release_gil_policy()
                , "Populate the matrix mat with the inverse distances between all of the\npoints of the two CoordGroups. Return the shortest distance between\nthe two CoordGroups." );
        
        }
        { //::SireVol::TransformedSpace::calcInvDist2
        
            typedef double ( ::SireVol::TransformedSpace::*calcInvDist2_function_type)( ::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcInvDist2_function_type calcInvDist2_function_value( &::SireVol::TransformedSpace::calcInvDist2 );
            
            TransformedSpace_exposer.def( 
                "calcInvDist2"
                , calcInvDist2_function_value
                , ( bp::arg("group"), bp::arg("mat") )
                , bp::release_gil_policy()
                , "Populate the matrix mat with the inverse distances^2 between all points in\nthe group group. Return the smallest distance between points." );
        
        }
        { //::SireVol::TransformedSpace::calcInvDist2
        
            typedef double ( ::SireVol::TransformedSpace::*calcInvDist2_function_type)( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,::SireVol::DistMatrix & ) const;
            calcInvDist2_function_type calcInvDist2_function_value( &::SireVol::TransformedSpace::calcInvDist2 );
            
            TransformedSpace_exposer.def( 
                "calcInvDist2"
                , calcInvDist2_function_value
                , ( bp::arg("group1"), bp::arg("group2"), bp::arg("mat") )
                , bp::release_gil_policy()
                , "Populate the matrix mat with the inverse distances^2 between all of the\npoints of the two CoordGroups. Return the shortest distance between\nthe two CoordGroups." );
        
        }
        { //::SireVol::TransformedSpace::getBoxCenter
        
            typedef ::SireMaths::Vector ( ::SireVol::TransformedSpace::*getBoxCenter_function_type)( ::SireMaths::Vector const & ) const;
            getBoxCenter_function_type getBoxCenter_function_value( &::SireVol::TransformedSpace::getBoxCenter );
            
            TransformedSpace_exposer.def( 
                "getBoxCenter"
                , getBoxCenter_function_value
                , ( bp::arg("p") )
                , bp::release_gil_policy()
                , "Return the center of the box that contains the point p assuming\nthat the center for the central box is located at the origin" );
        
        }
        { //::SireVol::TransformedSpace::getBoxCenter
        
            typedef ::SireMaths::Vector ( ::SireVol::TransformedSpace::*getBoxCenter_function_type)( ::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            getBoxCenter_function_type getBoxCenter_function_value( &::SireVol::TransformedSpace::getBoxCenter );
            
            TransformedSpace_exposer.def( 
                "getBoxCenter"
                , getBoxCenter_function_value
                , ( bp::arg("p"), bp::arg("center") )
                , bp::release_gil_policy()
                , "Return the center of the box that contains the point p assuming\nthat the center for the central box is located at center" );
        
        }
        { //::SireVol::TransformedSpace::getCopiesWithin
        
            typedef ::QList< boost::tuples::tuple< double, SireVol::CoordGroup, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > > ( ::SireVol::TransformedSpace::*getCopiesWithin_function_type)( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const &,double ) const;
            getCopiesWithin_function_type getCopiesWithin_function_value( &::SireVol::TransformedSpace::getCopiesWithin );
            
            TransformedSpace_exposer.def( 
                "getCopiesWithin"
                , getCopiesWithin_function_value
                , ( bp::arg("group"), bp::arg("center"), bp::arg("dist") )
                , bp::release_gil_policy()
                , "Return a list of copies of CoordGroup group that are within\ndistance of the CoordGroup center, translating group so that\nit has the right coordinates to be around center. As this is not\na periodic space, this will merely return a copy of group if\nit is within the specified distance." );
        
        }
        { //::SireVol::TransformedSpace::getImagesWithin
        
            typedef ::QVector< SireMaths::Vector > ( ::SireVol::TransformedSpace::*getImagesWithin_function_type)( ::SireMaths::Vector const &,::SireMaths::Vector const &,double ) const;
            getImagesWithin_function_type getImagesWithin_function_value( &::SireVol::TransformedSpace::getImagesWithin );
            
            TransformedSpace_exposer.def( 
                "getImagesWithin"
                , getImagesWithin_function_value
                , ( bp::arg("point"), bp::arg("center"), bp::arg("dist") )
                , bp::release_gil_policy()
                , "Return all periodic images of point with respect to center within\ndist distance of center" );
        
        }
        { //::SireVol::TransformedSpace::getMinimumImage
        
            typedef ::QVector< SireMaths::Vector > ( ::SireVol::TransformedSpace::*getMinimumImage_function_type)( ::QVector< SireMaths::Vector > const &,::SireMaths::Vector const & ) const;
            getMinimumImage_function_type getMinimumImage_function_value( &::SireVol::TransformedSpace::getMinimumImage );
            
            TransformedSpace_exposer.def( 
                "getMinimumImage"
                , getMinimumImage_function_value
                , ( bp::arg("coords"), bp::arg("center") )
                , bp::release_gil_policy()
                , "A TransformedSpace space is not periodic, so this just returns the input point" );
        
        }
        { //::SireVol::TransformedSpace::getMinimumImage
        
            typedef ::SireVol::CoordGroup ( ::SireVol::TransformedSpace::*getMinimumImage_function_type)( ::SireVol::CoordGroup const &,::SireMaths::Vector const & ) const;
            getMinimumImage_function_type getMinimumImage_function_value( &::SireVol::TransformedSpace::getMinimumImage );
            
            TransformedSpace_exposer.def( 
                "getMinimumImage"
                , getMinimumImage_function_value
                , ( bp::arg("group"), bp::arg("center") )
                , bp::release_gil_policy()
                , "A TransformedSpace space is not periodic, so this just returns the input point" );
        
        }
        { //::SireVol::TransformedSpace::getMinimumImage
        
            typedef ::SireVol::CoordGroupArray ( ::SireVol::TransformedSpace::*getMinimumImage_function_type)( ::SireVol::CoordGroupArray const &,::SireMaths::Vector const &,bool ) const;
            getMinimumImage_function_type getMinimumImage_function_value( &::SireVol::TransformedSpace::getMinimumImage );
            
            TransformedSpace_exposer.def( 
                "getMinimumImage"
                , getMinimumImage_function_value
                , ( bp::arg("groups"), bp::arg("center"), bp::arg("translate_as_one")=(bool)(false) )
                , "" );
        
        }
        { //::SireVol::TransformedSpace::getMinimumImage
        
            typedef ::SireVol::AABox ( ::SireVol::TransformedSpace::*getMinimumImage_function_type)( ::SireVol::AABox const &,::SireMaths::Vector const & ) const;
            getMinimumImage_function_type getMinimumImage_function_value( &::SireVol::TransformedSpace::getMinimumImage );
            
            TransformedSpace_exposer.def( 
                "getMinimumImage"
                , getMinimumImage_function_value
                , ( bp::arg("aabox"), bp::arg("center") )
                , bp::release_gil_policy()
                , "A TransformedSpace space is not periodic, so this just returns the input aabox" );
        
        }
        { //::SireVol::TransformedSpace::getMinimumImage
        
            typedef ::SireMaths::Vector ( ::SireVol::TransformedSpace::*getMinimumImage_function_type)( ::SireMaths::Vector const &,::SireMaths::Vector const & ) const;
            getMinimumImage_function_type getMinimumImage_function_value( &::SireVol::TransformedSpace::getMinimumImage );
            
            TransformedSpace_exposer.def( 
                "getMinimumImage"
                , getMinimumImage_function_value
                , ( bp::arg("point"), bp::arg("center") )
                , bp::release_gil_policy()
                , "A TransformedSpace space is not periodic, so this just returns the input point" );
        
        }
        { //::SireVol::TransformedSpace::getRandomPoint
        
            typedef ::SireMaths::Vector ( ::SireVol::TransformedSpace::*getRandomPoint_function_type)( ::SireMaths::Vector const &,::SireMaths::RanGenerator const & ) const;
            getRandomPoint_function_type getRandomPoint_function_value( &::SireVol::TransformedSpace::getRandomPoint );
            
            TransformedSpace_exposer.def( 
                "getRandomPoint"
                , getRandomPoint_function_value
                , ( bp::arg("center"), bp::arg("generator") )
                , bp::release_gil_policy()
                , "Return a random point in this space - this can be truly anywhere\n(well, it is limited to within -10^20 and 10^20 angstroms)\n" );
        
        }
        { //::SireVol::TransformedSpace::isCartesian
        
            typedef bool ( ::SireVol::TransformedSpace::*isCartesian_function_type)(  ) const;
            isCartesian_function_type isCartesian_function_value( &::SireVol::TransformedSpace::isCartesian );
            
            TransformedSpace_exposer.def( 
                "isCartesian"
                , isCartesian_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireVol::TransformedSpace::isPeriodic
        
            typedef bool ( ::SireVol::TransformedSpace::*isPeriodic_function_type)(  ) const;
            isPeriodic_function_type isPeriodic_function_value( &::SireVol::TransformedSpace::isPeriodic );
            
            TransformedSpace_exposer.def( 
                "isPeriodic"
                , isPeriodic_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireVol::TransformedSpace::minimumDistance
        
            typedef double ( ::SireVol::TransformedSpace::*minimumDistance_function_type)( ::SireVol::CoordGroup const &,::SireVol::CoordGroup const & ) const;
            minimumDistance_function_type minimumDistance_function_value( &::SireVol::TransformedSpace::minimumDistance );
            
            TransformedSpace_exposer.def( 
                "minimumDistance"
                , minimumDistance_function_value
                , ( bp::arg("group0"), bp::arg("group1") )
                , bp::release_gil_policy()
                , "Return the minimum distance between the points in group0 and group1." );
        
        }
        { //::SireVol::TransformedSpace::minimumDistance
        
            typedef double ( ::SireVol::TransformedSpace::*minimumDistance_function_type)( ::SireVol::CoordGroup const & ) const;
            minimumDistance_function_type minimumDistance_function_value( &::SireVol::TransformedSpace::minimumDistance );
            
            TransformedSpace_exposer.def( 
                "minimumDistance"
                , minimumDistance_function_value
                , ( bp::arg("group") )
                , bp::release_gil_policy()
                , "Return the minimum distance between points within the group group." );
        
        }
        { //::SireVol::TransformedSpace::minimumDistance
        
            typedef double ( ::SireVol::TransformedSpace::*minimumDistance_function_type)( ::SireVol::AABox const &,::SireVol::AABox const & ) const;
            minimumDistance_function_type minimumDistance_function_value( &::SireVol::TransformedSpace::minimumDistance );
            
            TransformedSpace_exposer.def( 
                "minimumDistance"
                , minimumDistance_function_value
                , ( bp::arg("box0"), bp::arg("box1") )
                , bp::release_gil_policy()
                , "Return the minimum distance between the two passed boxes" );
        
        }
        { //::SireVol::TransformedSpace::minimumDistance
        
            typedef double ( ::SireVol::TransformedSpace::*minimumDistance_function_type)( ::SireMaths::Vector const &,::SireVol::AABox const & ) const;
            minimumDistance_function_type minimumDistance_function_value( &::SireVol::TransformedSpace::minimumDistance );
            
            TransformedSpace_exposer.def( 
                "minimumDistance"
                , minimumDistance_function_value
                , ( bp::arg("p"), bp::arg("box") )
                , bp::release_gil_policy()
                , "Return the minimum distance between a point and a box" );
        
        }
        TransformedSpace_exposer.def( bp::self != bp::self );
        { //::SireVol::TransformedSpace::operator=
        
            typedef ::SireVol::TransformedSpace & ( ::SireVol::TransformedSpace::*assign_function_type)( ::SireVol::TransformedSpace const & ) ;
            assign_function_type assign_function_value( &::SireVol::TransformedSpace::operator= );
            
            TransformedSpace_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        TransformedSpace_exposer.def( bp::self == bp::self );
        { //::SireVol::TransformedSpace::setVolume
        
            typedef ::SireVol::SpacePtr ( ::SireVol::TransformedSpace::*setVolume_function_type)( ::SireUnits::Dimension::Volume ) const;
            setVolume_function_type setVolume_function_value( &::SireVol::TransformedSpace::setVolume );
            
            TransformedSpace_exposer.def( 
                "setVolume"
                , setVolume_function_value
                , ( bp::arg("volume") )
                , bp::release_gil_policy()
                , "Throw an exception as an infinite space doesnt have a volume" );
        
        }
        { //::SireVol::TransformedSpace::toString
        
            typedef ::QString ( ::SireVol::TransformedSpace::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireVol::TransformedSpace::toString );
            
            TransformedSpace_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "Return a string representation of this space" );
        
        }
        { //::SireVol::TransformedSpace::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireVol::TransformedSpace::typeName );
            
            TransformedSpace_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireVol::TransformedSpace::volume
        
            typedef ::SireUnits::Dimension::Volume ( ::SireVol::TransformedSpace::*volume_function_type)(  ) const;
            volume_function_type volume_function_value( &::SireVol::TransformedSpace::volume );
            
            TransformedSpace_exposer.def( 
                "volume"
                , volume_function_value
                , bp::release_gil_policy()
                , "Throw an exception as an infinite space doesnt have a volume" );
        
        }
        TransformedSpace_exposer.staticmethod( "typeName" );
        TransformedSpace_exposer.def( "__copy__", &__copy__);
        TransformedSpace_exposer.def( "__deepcopy__", &__copy__);
        TransformedSpace_exposer.def( "clone", &__copy__);
        TransformedSpace_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireVol::TransformedSpace >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TransformedSpace_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireVol::TransformedSpace >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        TransformedSpace_exposer.def_pickle(sire_pickle_suite< ::SireVol::TransformedSpace >());
        TransformedSpace_exposer.def( "__str__", &__str__< ::SireVol::TransformedSpace > );
        TransformedSpace_exposer.def( "__repr__", &__str__< ::SireVol::TransformedSpace > );
    }

}
