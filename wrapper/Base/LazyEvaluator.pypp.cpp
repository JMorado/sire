// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "LazyEvaluator.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/property.h"

#include "lazyevaluator.h"

#include <QDebug>

#include <boost/noncopyable.hpp>

#include <memory>

#include <tbb/collaborative_call_once.h>

#include <tbb/spin_rw_mutex.h>

#include "lazyevaluator.h"

SireBase::LazyEvaluator __copy__(const SireBase::LazyEvaluator &other){ return SireBase::LazyEvaluator(other); }

const char* pvt_get_name(const SireBase::LazyEvaluator&){ return "SireBase::LazyEvaluator";}

#include "Helpers/release_gil_policy.hpp"

void register_LazyEvaluator_class(){

    { //::SireBase::LazyEvaluator
        typedef bp::class_< SireBase::LazyEvaluator > LazyEvaluator_exposer_t;
        LazyEvaluator_exposer_t LazyEvaluator_exposer = LazyEvaluator_exposer_t( "LazyEvaluator", "This class provides a LazyEvaluator that can be used to\nlazily evalute and cache the result of calling a function\nonce only. This uses tbb::collaborative_call_once to ensure\nthat other threads that block on this are able to go down\nand help the calling thread with any downstream parallel\nsections\n", bp::init< >("") );
        bp::scope LazyEvaluator_scope( LazyEvaluator_exposer );
        LazyEvaluator_exposer.def( bp::init< SireBase::LazyEvaluator const & >(( bp::arg("other") ), "") );
        { //::SireBase::LazyEvaluator::operator=
        
            typedef ::SireBase::LazyEvaluator & ( ::SireBase::LazyEvaluator::*assign_function_type)( ::SireBase::LazyEvaluator const & ) ;
            assign_function_type assign_function_value( &::SireBase::LazyEvaluator::operator= );
            
            LazyEvaluator_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        LazyEvaluator_exposer.def( "__copy__", &__copy__);
        LazyEvaluator_exposer.def( "__deepcopy__", &__copy__);
        LazyEvaluator_exposer.def( "clone", &__copy__);
        LazyEvaluator_exposer.def( "__str__", &pvt_get_name);
        LazyEvaluator_exposer.def( "__repr__", &pvt_get_name);
    }

}
