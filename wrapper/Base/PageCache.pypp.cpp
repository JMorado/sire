// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "PageCache.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "pagecache.h"

#include <QDir>

#include <boost/noncopyable.hpp>

#include "pagecache.h"

SireBase::PageCache __copy__(const SireBase::PageCache &other){ return SireBase::PageCache(other); }

#include "Helpers/copy.hpp"

const char* pvt_get_name(const SireBase::PageCache&){ return "SireBase::PageCache";}

#include "Helpers/release_gil_policy.hpp"

#include "SireError/errors.h"

#include "pagecache.h"

#include <QDir>

#include <boost/noncopyable.hpp>

#include "pagecache.h"

SireBase::PageCache::Handle __copy__(const SireBase::PageCache::Handle &other){ return SireBase::PageCache::Handle(other); }

#include "Helpers/copy.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "Helpers/len.hpp"

#include "SireError/errors.h"

#include "pagecache.h"

#include <QDir>

#include <boost/noncopyable.hpp>

#include "pagecache.h"

SireBase::PageCache::Page __copy__(const SireBase::PageCache::Page &other){ return SireBase::PageCache::Page(other); }

#include "Helpers/copy.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "Helpers/len.hpp"

void register_PageCache_class(){

    { //::SireBase::PageCache
        typedef bp::class_< SireBase::PageCache > PageCache_exposer_t;
        PageCache_exposer_t PageCache_exposer = PageCache_exposer_t( "PageCache", "This class manages a swap cache of binary data that can be\npaged to and from disk. The cache can receive binary data\nof any size, and will automatically manage the paging of\nthat data to and from disk as it is accessed.\n\nYou can create different caches, and have control over the maximum\nsize of each cache page.\n\nNote that deleting the cache will delete all data contained\ntherein - including data paged to disk\n", bp::init< bp::optional< int > >(( bp::arg("page_size")=(int)(32 * 1024 * 1024) ), "") );
        bp::scope PageCache_scope( PageCache_exposer );
        { //::SireBase::PageCache::Handle
            typedef bp::class_< SireBase::PageCache::Handle > Handle_exposer_t;
            Handle_exposer_t Handle_exposer = Handle_exposer_t( "Handle", "This is a handle to a piece of data that has\nbeen added to the cache. This will either contain\nthe actual data, or will hold the information\nnecessary to retrieve that data from disk.\n\nData is removed from the cache when all handles\nto it are deleted\n", bp::init< >("") );
            bp::scope Handle_scope( Handle_exposer );
            Handle_exposer.def( bp::init< std::shared_ptr< SireBase::detail::HandleData > >(( bp::arg("data") ), "") );
            Handle_exposer.def( bp::init< SireBase::PageCache::Handle const & >(( bp::arg("other") ), "") );
            { //::SireBase::PageCache::Handle::assertValid
            
                typedef void ( ::SireBase::PageCache::Handle::*assertValid_function_type)(  ) const;
                assertValid_function_type assertValid_function_value( &::SireBase::PageCache::Handle::assertValid );
                
                Handle_exposer.def( 
                    "assertValid"
                    , assertValid_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Handle::clear
            
                typedef void ( ::SireBase::PageCache::Handle::*clear_function_type)(  ) ;
                clear_function_type clear_function_value( &::SireBase::PageCache::Handle::clear );
                
                Handle_exposer.def( 
                    "clear"
                    , clear_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Handle::fetch
            
                typedef ::QByteArray ( ::SireBase::PageCache::Handle::*fetch_function_type)(  ) const;
                fetch_function_type fetch_function_value( &::SireBase::PageCache::Handle::fetch );
                
                Handle_exposer.def( 
                    "fetch"
                    , fetch_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Handle::isNull
            
                typedef bool ( ::SireBase::PageCache::Handle::*isNull_function_type)(  ) const;
                isNull_function_type isNull_function_value( &::SireBase::PageCache::Handle::isNull );
                
                Handle_exposer.def( 
                    "isNull"
                    , isNull_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Handle::isValid
            
                typedef bool ( ::SireBase::PageCache::Handle::*isValid_function_type)(  ) const;
                isValid_function_type isValid_function_value( &::SireBase::PageCache::Handle::isValid );
                
                Handle_exposer.def( 
                    "isValid"
                    , isValid_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Handle::nBytes
            
                typedef int ( ::SireBase::PageCache::Handle::*nBytes_function_type)(  ) const;
                nBytes_function_type nBytes_function_value( &::SireBase::PageCache::Handle::nBytes );
                
                Handle_exposer.def( 
                    "nBytes"
                    , nBytes_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Handle::operator=
            
                typedef ::SireBase::PageCache::Handle & ( ::SireBase::PageCache::Handle::*assign_function_type)( ::SireBase::PageCache::Handle const & ) ;
                assign_function_type assign_function_value( &::SireBase::PageCache::Handle::operator= );
                
                Handle_exposer.def( 
                    "assign"
                    , assign_function_value
                    , ( bp::arg("other") )
                    , bp::return_self< >()
                    , "" );
            
            }
            { //::SireBase::PageCache::Handle::page
            
                typedef ::SireBase::PageCache::Page ( ::SireBase::PageCache::Handle::*page_function_type)(  ) const;
                page_function_type page_function_value( &::SireBase::PageCache::Handle::page );
                
                Handle_exposer.def( 
                    "page"
                    , page_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Handle::parent
            
                typedef ::SireBase::PageCache ( ::SireBase::PageCache::Handle::*parent_function_type)(  ) const;
                parent_function_type parent_function_value( &::SireBase::PageCache::Handle::parent );
                
                Handle_exposer.def( 
                    "parent"
                    , parent_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Handle::reset
            
                typedef void ( ::SireBase::PageCache::Handle::*reset_function_type)(  ) ;
                reset_function_type reset_function_value( &::SireBase::PageCache::Handle::reset );
                
                Handle_exposer.def( 
                    "reset"
                    , reset_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Handle::size
            
                typedef int ( ::SireBase::PageCache::Handle::*size_function_type)(  ) const;
                size_function_type size_function_value( &::SireBase::PageCache::Handle::size );
                
                Handle_exposer.def( 
                    "size"
                    , size_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Handle::toString
            
                typedef ::QString ( ::SireBase::PageCache::Handle::*toString_function_type)(  ) const;
                toString_function_type toString_function_value( &::SireBase::PageCache::Handle::toString );
                
                Handle_exposer.def( 
                    "toString"
                    , toString_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Handle::typeName
            
                typedef char const * ( *typeName_function_type )(  );
                typeName_function_type typeName_function_value( &::SireBase::PageCache::Handle::typeName );
                
                Handle_exposer.def( 
                    "typeName"
                    , typeName_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Handle::what
            
                typedef char const * ( ::SireBase::PageCache::Handle::*what_function_type)(  ) const;
                what_function_type what_function_value( &::SireBase::PageCache::Handle::what );
                
                Handle_exposer.def( 
                    "what"
                    , what_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            Handle_exposer.staticmethod( "typeName" );
            Handle_exposer.def( "__copy__", &__copy__<SireBase::PageCache::Handle>);
            Handle_exposer.def( "__deepcopy__", &__copy__<SireBase::PageCache::Handle>);
            Handle_exposer.def( "clone", &__copy__<SireBase::PageCache::Handle>);
            Handle_exposer.def( "__str__", &__str__< ::SireBase::PageCache::Handle > );
            Handle_exposer.def( "__repr__", &__str__< ::SireBase::PageCache::Handle > );
            Handle_exposer.def( "__len__", &__len_size< ::SireBase::PageCache::Handle > );
        }
        { //::SireBase::PageCache::Page
            typedef bp::class_< SireBase::PageCache::Page > Page_exposer_t;
            Page_exposer_t Page_exposer = Page_exposer_t( "Page", "This is a page in the cache. This can hold multiple\nobjects - the whole page is either resident in memory\nor cached to disk.\n", bp::init< >("") );
            bp::scope Page_scope( Page_exposer );
            Page_exposer.def( bp::init< std::shared_ptr< SireBase::detail::PageData > >(( bp::arg("data") ), "") );
            Page_exposer.def( bp::init< SireBase::PageCache::Page const & >(( bp::arg("other") ), "") );
            { //::SireBase::PageCache::Page::assertValid
            
                typedef void ( ::SireBase::PageCache::Page::*assertValid_function_type)(  ) const;
                assertValid_function_type assertValid_function_value( &::SireBase::PageCache::Page::assertValid );
                
                Page_exposer.def( 
                    "assertValid"
                    , assertValid_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Page::isCached
            
                typedef bool ( ::SireBase::PageCache::Page::*isCached_function_type)(  ) const;
                isCached_function_type isCached_function_value( &::SireBase::PageCache::Page::isCached );
                
                Page_exposer.def( 
                    "isCached"
                    , isCached_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Page::isNull
            
                typedef bool ( ::SireBase::PageCache::Page::*isNull_function_type)(  ) const;
                isNull_function_type isNull_function_value( &::SireBase::PageCache::Page::isNull );
                
                Page_exposer.def( 
                    "isNull"
                    , isNull_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Page::isResident
            
                typedef bool ( ::SireBase::PageCache::Page::*isResident_function_type)(  ) const;
                isResident_function_type isResident_function_value( &::SireBase::PageCache::Page::isResident );
                
                Page_exposer.def( 
                    "isResident"
                    , isResident_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Page::isValid
            
                typedef bool ( ::SireBase::PageCache::Page::*isValid_function_type)(  ) const;
                isValid_function_type isValid_function_value( &::SireBase::PageCache::Page::isValid );
                
                Page_exposer.def( 
                    "isValid"
                    , isValid_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Page::maxBytes
            
                typedef int ( ::SireBase::PageCache::Page::*maxBytes_function_type)(  ) const;
                maxBytes_function_type maxBytes_function_value( &::SireBase::PageCache::Page::maxBytes );
                
                Page_exposer.def( 
                    "maxBytes"
                    , maxBytes_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Page::nBytes
            
                typedef int ( ::SireBase::PageCache::Page::*nBytes_function_type)(  ) const;
                nBytes_function_type nBytes_function_value( &::SireBase::PageCache::Page::nBytes );
                
                Page_exposer.def( 
                    "nBytes"
                    , nBytes_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Page::operator=
            
                typedef ::SireBase::PageCache::Page & ( ::SireBase::PageCache::Page::*assign_function_type)( ::SireBase::PageCache::Page const & ) ;
                assign_function_type assign_function_value( &::SireBase::PageCache::Page::operator= );
                
                Page_exposer.def( 
                    "assign"
                    , assign_function_value
                    , ( bp::arg("other") )
                    , bp::return_self< >()
                    , "" );
            
            }
            { //::SireBase::PageCache::Page::parent
            
                typedef ::SireBase::PageCache ( ::SireBase::PageCache::Page::*parent_function_type)(  ) const;
                parent_function_type parent_function_value( &::SireBase::PageCache::Page::parent );
                
                Page_exposer.def( 
                    "parent"
                    , parent_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Page::size
            
                typedef int ( ::SireBase::PageCache::Page::*size_function_type)(  ) const;
                size_function_type size_function_value( &::SireBase::PageCache::Page::size );
                
                Page_exposer.def( 
                    "size"
                    , size_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Page::toString
            
                typedef ::QString ( ::SireBase::PageCache::Page::*toString_function_type)(  ) const;
                toString_function_type toString_function_value( &::SireBase::PageCache::Page::toString );
                
                Page_exposer.def( 
                    "toString"
                    , toString_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Page::typeName
            
                typedef char const * ( *typeName_function_type )(  );
                typeName_function_type typeName_function_value( &::SireBase::PageCache::Page::typeName );
                
                Page_exposer.def( 
                    "typeName"
                    , typeName_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            { //::SireBase::PageCache::Page::what
            
                typedef char const * ( ::SireBase::PageCache::Page::*what_function_type)(  ) const;
                what_function_type what_function_value( &::SireBase::PageCache::Page::what );
                
                Page_exposer.def( 
                    "what"
                    , what_function_value
                    , bp::release_gil_policy()
                    , "" );
            
            }
            Page_exposer.staticmethod( "typeName" );
            Page_exposer.def( "__copy__", &__copy__<SireBase::PageCache::Page>);
            Page_exposer.def( "__deepcopy__", &__copy__<SireBase::PageCache::Page>);
            Page_exposer.def( "clone", &__copy__<SireBase::PageCache::Page>);
            Page_exposer.def( "__str__", &__str__< ::SireBase::PageCache::Page > );
            Page_exposer.def( "__repr__", &__str__< ::SireBase::PageCache::Page > );
            Page_exposer.def( "__len__", &__len_size< ::SireBase::PageCache::Page > );
        }
        PageCache_exposer.def( bp::init< QString const &, bp::optional< int > >(( bp::arg("cache_dir"), bp::arg("page_size")=(int)(32 * 1024 * 1024) ), "") );
        PageCache_exposer.def( bp::init< std::shared_ptr< SireBase::detail::CacheData > >(( bp::arg("data") ), "") );
        PageCache_exposer.def( bp::init< SireBase::PageCache const & >(( bp::arg("other") ), "") );
        { //::SireBase::PageCache::assertValid
        
            typedef void ( ::SireBase::PageCache::*assertValid_function_type)(  ) const;
            assertValid_function_type assertValid_function_value( &::SireBase::PageCache::assertValid );
            
            PageCache_exposer.def( 
                "assertValid"
                , assertValid_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::PageCache::cache
        
            typedef ::SireBase::PageCache::Handle ( ::SireBase::PageCache::*cache_function_type)( ::QByteArray const & ) ;
            cache_function_type cache_function_value( &::SireBase::PageCache::cache );
            
            PageCache_exposer.def( 
                "cache"
                , cache_function_value
                , ( bp::arg("data") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::PageCache::cacheDir
        
            typedef ::QString ( ::SireBase::PageCache::*cacheDir_function_type)(  ) const;
            cacheDir_function_type cacheDir_function_value( &::SireBase::PageCache::cacheDir );
            
            PageCache_exposer.def( 
                "cacheDir"
                , cacheDir_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::PageCache::getStatistics
        
            typedef ::QString ( *getStatistics_function_type )(  );
            getStatistics_function_type getStatistics_function_value( &::SireBase::PageCache::getStatistics );
            
            PageCache_exposer.def( 
                "getStatistics"
                , getStatistics_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::PageCache::isNull
        
            typedef bool ( ::SireBase::PageCache::*isNull_function_type)(  ) const;
            isNull_function_type isNull_function_value( &::SireBase::PageCache::isNull );
            
            PageCache_exposer.def( 
                "isNull"
                , isNull_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::PageCache::isValid
        
            typedef bool ( ::SireBase::PageCache::*isValid_function_type)(  ) const;
            isValid_function_type isValid_function_value( &::SireBase::PageCache::isValid );
            
            PageCache_exposer.def( 
                "isValid"
                , isValid_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::PageCache::nBytes
        
            typedef int ( ::SireBase::PageCache::*nBytes_function_type)(  ) const;
            nBytes_function_type nBytes_function_value( &::SireBase::PageCache::nBytes );
            
            PageCache_exposer.def( 
                "nBytes"
                , nBytes_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::PageCache::nPages
        
            typedef int ( ::SireBase::PageCache::*nPages_function_type)(  ) const;
            nPages_function_type nPages_function_value( &::SireBase::PageCache::nPages );
            
            PageCache_exposer.def( 
                "nPages"
                , nPages_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::PageCache::operator=
        
            typedef ::SireBase::PageCache & ( ::SireBase::PageCache::*assign_function_type)( ::SireBase::PageCache const & ) ;
            assign_function_type assign_function_value( &::SireBase::PageCache::operator= );
            
            PageCache_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        { //::SireBase::PageCache::pageSize
        
            typedef int ( ::SireBase::PageCache::*pageSize_function_type)(  ) const;
            pageSize_function_type pageSize_function_value( &::SireBase::PageCache::pageSize );
            
            PageCache_exposer.def( 
                "pageSize"
                , pageSize_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::PageCache::size
        
            typedef int ( ::SireBase::PageCache::*size_function_type)(  ) const;
            size_function_type size_function_value( &::SireBase::PageCache::size );
            
            PageCache_exposer.def( 
                "size"
                , size_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::PageCache::store
        
            typedef ::SireBase::PageCache::Handle ( ::SireBase::PageCache::*store_function_type)( ::QByteArray const & ) ;
            store_function_type store_function_value( &::SireBase::PageCache::store );
            
            PageCache_exposer.def( 
                "store"
                , store_function_value
                , ( bp::arg("data") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::PageCache::toString
        
            typedef ::QString ( ::SireBase::PageCache::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireBase::PageCache::toString );
            
            PageCache_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::PageCache::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireBase::PageCache::typeName );
            
            PageCache_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::PageCache::what
        
            typedef char const * ( ::SireBase::PageCache::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireBase::PageCache::what );
            
            PageCache_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        PageCache_exposer.staticmethod( "getStatistics" );
        PageCache_exposer.staticmethod( "typeName" );
        PageCache_exposer.def( "__copy__", &__copy__<SireBase::PageCache>);
        PageCache_exposer.def( "__deepcopy__", &__copy__<SireBase::PageCache>);
        PageCache_exposer.def( "clone", &__copy__<SireBase::PageCache>);
        PageCache_exposer.def( "__str__", &pvt_get_name);
        PageCache_exposer.def( "__repr__", &pvt_get_name);
    }

}
