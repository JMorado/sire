// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "ProgressBar.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "progressbar.h"

#include <QDateTime>

#include "progressbar.h"

SireBase::ProgressBar __copy__(const SireBase::ProgressBar &other){ return SireBase::ProgressBar(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_ProgressBar_class(){

    { //::SireBase::ProgressBar
        typedef bp::class_< SireBase::ProgressBar, bp::bases< SireBase::Property > > ProgressBar_exposer_t;
        ProgressBar_exposer_t ProgressBar_exposer = ProgressBar_exposer_t( "ProgressBar", "This is a progress bar", bp::init< >("") );
        bp::scope ProgressBar_scope( ProgressBar_exposer );
        ProgressBar_exposer.def( bp::init< qint64, bp::optional< bool > >(( bp::arg("total"), bp::arg("show_time")=(bool)(true) ), "") );
        ProgressBar_exposer.def( bp::init< qint64, QString const &, bp::optional< bool > >(( bp::arg("total"), bp::arg("text"), bp::arg("show_time")=(bool)(true) ), "") );
        ProgressBar_exposer.def( bp::init< QString const & >(( bp::arg("text") ), "") );
        ProgressBar_exposer.def( bp::init< SireBase::ProgressBar const & >(( bp::arg("other") ), "") );
        { //::SireBase::ProgressBar::barSize
        
            typedef int ( ::SireBase::ProgressBar::*barSize_function_type)(  ) const;
            barSize_function_type barSize_function_value( &::SireBase::ProgressBar::barSize );
            
            ProgressBar_exposer.def( 
                "barSize"
                , barSize_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::enter
        
            typedef ::SireBase::ProgressBar ( ::SireBase::ProgressBar::*enter_function_type)(  ) const;
            enter_function_type enter_function_value( &::SireBase::ProgressBar::enter );
            
            ProgressBar_exposer.def( 
                "enter"
                , enter_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::exit
        
            typedef void ( ::SireBase::ProgressBar::*exit_function_type)(  ) ;
            exit_function_type exit_function_value( &::SireBase::ProgressBar::exit );
            
            ProgressBar_exposer.def( 
                "exit"
                , exit_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::isDeterministic
        
            typedef bool ( ::SireBase::ProgressBar::*isDeterministic_function_type)(  ) const;
            isDeterministic_function_type isDeterministic_function_value( &::SireBase::ProgressBar::isDeterministic );
            
            ProgressBar_exposer.def( 
                "isDeterministic"
                , isDeterministic_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        ProgressBar_exposer.def( bp::self != bp::self );
        { //::SireBase::ProgressBar::operator=
        
            typedef ::SireBase::ProgressBar & ( ::SireBase::ProgressBar::*assign_function_type)( ::SireBase::ProgressBar const & ) ;
            assign_function_type assign_function_value( &::SireBase::ProgressBar::operator= );
            
            ProgressBar_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        ProgressBar_exposer.def( bp::self == bp::self );
        { //::SireBase::ProgressBar::setCompleted
        
            typedef void ( ::SireBase::ProgressBar::*setCompleted_function_type)(  ) ;
            setCompleted_function_type setCompleted_function_value( &::SireBase::ProgressBar::setCompleted );
            
            ProgressBar_exposer.def( 
                "setCompleted"
                , setCompleted_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::setProgress
        
            typedef void ( ::SireBase::ProgressBar::*setProgress_function_type)( ::qint64 ) ;
            setProgress_function_type setProgress_function_value( &::SireBase::ProgressBar::setProgress );
            
            ProgressBar_exposer.def( 
                "setProgress"
                , setProgress_function_value
                , ( bp::arg("value") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::setProgress
        
            typedef void ( ::SireBase::ProgressBar::*setProgress_function_type)( ::qint64,::QString const & ) ;
            setProgress_function_type setProgress_function_value( &::SireBase::ProgressBar::setProgress );
            
            ProgressBar_exposer.def( 
                "setProgress"
                , setProgress_function_value
                , ( bp::arg("value"), bp::arg("text") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::setSilent
        
            typedef void ( *setSilent_function_type )(  );
            setSilent_function_type setSilent_function_value( &::SireBase::ProgressBar::setSilent );
            
            ProgressBar_exposer.def( 
                "setSilent"
                , setSilent_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::setTheme
        
            typedef void ( *setTheme_function_type )( ::QString );
            setTheme_function_type setTheme_function_value( &::SireBase::ProgressBar::setTheme );
            
            ProgressBar_exposer.def( 
                "setTheme"
                , setTheme_function_value
                , ( bp::arg("theme") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::showTime
        
            typedef bool ( ::SireBase::ProgressBar::*showTime_function_type)(  ) const;
            showTime_function_type showTime_function_value( &::SireBase::ProgressBar::showTime );
            
            ProgressBar_exposer.def( 
                "showTime"
                , showTime_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::text
        
            typedef char const * ( ::SireBase::ProgressBar::*text_function_type)(  ) const;
            text_function_type text_function_value( &::SireBase::ProgressBar::text );
            
            ProgressBar_exposer.def( 
                "text"
                , text_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::tick
        
            typedef void ( ::SireBase::ProgressBar::*tick_function_type)(  ) ;
            tick_function_type tick_function_value( &::SireBase::ProgressBar::tick );
            
            ProgressBar_exposer.def( 
                "tick"
                , tick_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::tick
        
            typedef void ( ::SireBase::ProgressBar::*tick_function_type)( ::QString const & ) ;
            tick_function_type tick_function_value( &::SireBase::ProgressBar::tick );
            
            ProgressBar_exposer.def( 
                "tick"
                , tick_function_value
                , ( bp::arg("text") )
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireBase::ProgressBar::typeName );
            
            ProgressBar_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireBase::ProgressBar::what
        
            typedef char const * ( ::SireBase::ProgressBar::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireBase::ProgressBar::what );
            
            ProgressBar_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        ProgressBar_exposer.staticmethod( "setSilent" );
        ProgressBar_exposer.staticmethod( "setTheme" );
        ProgressBar_exposer.staticmethod( "typeName" );
        ProgressBar_exposer.def( "__copy__", &__copy__);
        ProgressBar_exposer.def( "__deepcopy__", &__copy__);
        ProgressBar_exposer.def( "clone", &__copy__);
        ProgressBar_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireBase::ProgressBar >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ProgressBar_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireBase::ProgressBar >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        ProgressBar_exposer.def_pickle(sire_pickle_suite< ::SireBase::ProgressBar >());
        ProgressBar_exposer.def( "__str__", &__str__< ::SireBase::ProgressBar > );
        ProgressBar_exposer.def( "__repr__", &__str__< ::SireBase::ProgressBar > );
    }

}
