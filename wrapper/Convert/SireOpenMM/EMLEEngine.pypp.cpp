// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "EMLEEngine.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireMaths/vector.h"

#include "SireVol/triclinicbox.h"

#include "emle.h"

#include "SireError/errors.h"

#include "SireMaths/vector.h"

#include "SireVol/triclinicbox.h"

#include "emle.h"

SireOpenMM::EMLEEngine __copy__(const SireOpenMM::EMLEEngine &other){ return SireOpenMM::EMLEEngine(other); }

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "SireError/errors.h"

#include "SireMaths/vector.h"

#include "SireVol/triclinicbox.h"

#include "emle.h"

#include "SireError/errors.h"

#include "SireMaths/vector.h"

#include "SireVol/triclinicbox.h"

#include "emle.h"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_EMLEEngine_class(){

    { //::SireOpenMM::EMLEEngine
        typedef bp::class_< SireOpenMM::EMLEEngine, bp::bases< SireOpenMM::QMEngine > > EMLEEngine_exposer_t;
        EMLEEngine_exposer_t EMLEEngine_exposer = EMLEEngine_exposer_t( "EMLEEngine", "", bp::init< >("Default constructor.") );
        bp::scope EMLEEngine_scope( EMLEEngine_exposer );
        EMLEEngine_exposer.def( bp::init< bp::api::object, bp::optional< SireUnits::Dimension::Length, int, double > >(( bp::arg("arg0"), bp::arg("cutoff")=7.5 * SireUnits::angstrom, bp::arg("neighbour_list_frequency")=(int)(20), bp::arg("lambda")=1. ), "Constructor\nPar:am py_object\nAn EMLECalculator Python object.\n\nPar:am cutoff\nThe ML cutoff distance.\n\nPar:am neighbour_list_frequency\nThe frequency at which the neighbour list is updated. (Number of steps.)\nIf zero, then no neighbour list is used.\n\nPar:am lambda\nThe lambda weighting factor. This can be used to interpolate between\npotentials for end-state correction calculations.\n") );
        EMLEEngine_exposer.def( bp::init< SireOpenMM::EMLEEngine const & >(( bp::arg("other") ), "Copy constructor.") );
        { //::SireOpenMM::EMLEEngine::call
        
            typedef ::boost::tuples::tuple< double, QVector< QVector< double > >, QVector< QVector< double > >, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::SireOpenMM::EMLEEngine::*call_function_type)( ::QVector< int >,::QVector< double >,::QVector< QVector< double > >,::QVector< QVector< double > > ) const;
            call_function_type call_function_value( &::SireOpenMM::EMLEEngine::call );
            
            EMLEEngine_exposer.def( 
                "call"
                , call_function_value
                , ( bp::arg("numbers_qm"), bp::arg("charges_mm"), bp::arg("xyz_qm"), bp::arg("xyz_mm") )
                , bp::release_gil_policy()
                , "Call the callback function.\nPar:am numbers_qm\nA vector of atomic numbers for the atoms in the ML region.\n\nPar:am charges_mm\nA vector of the charges on the MM atoms in mod electron charge.\n\nPar:am xyz_qm\nA vector of positions for the atoms in the ML region in Angstrom.\n\nPar:am xyz_mm\nA vector of positions for the atoms in the MM region in Angstrom.\n\nReturn:s\nA tuple containing:\n- The energy in kJmol.\n- A vector of forces for the QM atoms in kJmolnm.\n- A vector of forces for the MM atoms in kJmolnm.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::getAtoms
        
            typedef ::QVector< int > ( ::SireOpenMM::EMLEEngine::*getAtoms_function_type)(  ) const;
            getAtoms_function_type getAtoms_function_value( &::SireOpenMM::EMLEEngine::getAtoms );
            
            EMLEEngine_exposer.def( 
                "getAtoms"
                , getAtoms_function_value
                , bp::release_gil_policy()
                , "Get the indices of the atoms in the QM region.\nReturn:s\nA vector of atom indices for the QM region.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::getCallback
        
            typedef ::SireOpenMM::EMLECallback ( ::SireOpenMM::EMLEEngine::*getCallback_function_type)(  ) const;
            getCallback_function_type getCallback_function_value( &::SireOpenMM::EMLEEngine::getCallback );
            
            EMLEEngine_exposer.def( 
                "getCallback"
                , getCallback_function_value
                , bp::release_gil_policy()
                , "Get the callback object.\nReturn:s\nA Python object that contains the callback function.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::getCharges
        
            typedef ::QVector< double > ( ::SireOpenMM::EMLEEngine::*getCharges_function_type)(  ) const;
            getCharges_function_type getCharges_function_value( &::SireOpenMM::EMLEEngine::getCharges );
            
            EMLEEngine_exposer.def( 
                "getCharges"
                , getCharges_function_value
                , bp::release_gil_policy()
                , "Get the atomic charges of all atoms in the system.\nReturn:s\nA vector of atomic charges for all atoms in the system.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::getCutoff
        
            typedef ::SireUnits::Dimension::Length ( ::SireOpenMM::EMLEEngine::*getCutoff_function_type)(  ) const;
            getCutoff_function_type getCutoff_function_value( &::SireOpenMM::EMLEEngine::getCutoff );
            
            EMLEEngine_exposer.def( 
                "getCutoff"
                , getCutoff_function_value
                , bp::release_gil_policy()
                , "Get the QM cutoff distance.\nReturn:s\nThe QM cutoff distance.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::getLambda
        
            typedef double ( ::SireOpenMM::EMLEEngine::*getLambda_function_type)(  ) const;
            getLambda_function_type getLambda_function_value( &::SireOpenMM::EMLEEngine::getLambda );
            
            EMLEEngine_exposer.def( 
                "getLambda"
                , getLambda_function_value
                , bp::release_gil_policy()
                , "Get the lambda weighting factor.\nReturn:s\nThe lambda weighting factor.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::getLinkAtoms
        
            typedef ::boost::tuples::tuple< QMap< int, int >, QMap< int, QVector< int > >, QMap< int, double >, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::SireOpenMM::EMLEEngine::*getLinkAtoms_function_type)(  ) const;
            getLinkAtoms_function_type getLinkAtoms_function_value( &::SireOpenMM::EMLEEngine::getLinkAtoms );
            
            EMLEEngine_exposer.def( 
                "getLinkAtoms"
                , getLinkAtoms_function_value
                , bp::release_gil_policy()
                , "Get the link atoms associated with each QM atom.\nReturn:s\nA tuple containing:\n\nmm1_to_qm\nA dictionary mapping link atom (MM1) indices to the QM atoms to\nwhich they are bonded.\n\nmm1_to_mm2\nA dictionary of link atoms indices (MM1) to a list of the MM\natoms to which they are bonded (MM2).\n\nbond_scale_factors\nA dictionary of link atom indices (MM1) to a list of the bond\nlength scale factors between the QM and MM1 atoms. The scale\nfactors are the ratio of the equilibrium bond lengths for the\nQM-L (QM-link) atom and QM-MM1 atom, i.e. R0(QM-L)  R0(QM-MM1),\ntaken from the MM force field parameters for the molecule.\n\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::getMM2Atoms
        
            typedef ::QVector< int > ( ::SireOpenMM::EMLEEngine::*getMM2Atoms_function_type)(  ) const;
            getMM2Atoms_function_type getMM2Atoms_function_value( &::SireOpenMM::EMLEEngine::getMM2Atoms );
            
            EMLEEngine_exposer.def( 
                "getMM2Atoms"
                , getMM2Atoms_function_value
                , bp::release_gil_policy()
                , "Get the vector of MM2 atoms.\nReturn:s\nA vector of MM2 atom indices.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::getNeighbourListFrequency
        
            typedef int ( ::SireOpenMM::EMLEEngine::*getNeighbourListFrequency_function_type)(  ) const;
            getNeighbourListFrequency_function_type getNeighbourListFrequency_function_value( &::SireOpenMM::EMLEEngine::getNeighbourListFrequency );
            
            EMLEEngine_exposer.def( 
                "getNeighbourListFrequency"
                , getNeighbourListFrequency_function_value
                , bp::release_gil_policy()
                , "Get the neighbour list frequency.\nReturn:s\nThe neighbour list frequency.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::getNumbers
        
            typedef ::QVector< int > ( ::SireOpenMM::EMLEEngine::*getNumbers_function_type)(  ) const;
            getNumbers_function_type getNumbers_function_value( &::SireOpenMM::EMLEEngine::getNumbers );
            
            EMLEEngine_exposer.def( 
                "getNumbers"
                , getNumbers_function_value
                , bp::release_gil_policy()
                , "Get the atomic numbers for the atoms in the QM region.\nReturn:s\nA vector of atomic numbers for the atoms in the QM region.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::operator=
        
            typedef ::SireOpenMM::EMLEEngine & ( ::SireOpenMM::EMLEEngine::*assign_function_type)( ::SireOpenMM::EMLEEngine const & ) ;
            assign_function_type assign_function_value( &::SireOpenMM::EMLEEngine::operator= );
            
            EMLEEngine_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "Assignment operator." );
        
        }
        { //::SireOpenMM::EMLEEngine::setAtoms
        
            typedef void ( ::SireOpenMM::EMLEEngine::*setAtoms_function_type)( ::QVector< int > ) ;
            setAtoms_function_type setAtoms_function_value( &::SireOpenMM::EMLEEngine::setAtoms );
            
            EMLEEngine_exposer.def( 
                "setAtoms"
                , setAtoms_function_value
                , ( bp::arg("atoms") )
                , bp::release_gil_policy()
                , "Set the list of atom indices for the QM region.\nPar:am atoms\nA vector of atom indices for the QM region.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::setCallback
        
            typedef void ( ::SireOpenMM::EMLEEngine::*setCallback_function_type)( ::SireOpenMM::EMLECallback ) ;
            setCallback_function_type setCallback_function_value( &::SireOpenMM::EMLEEngine::setCallback );
            
            EMLEEngine_exposer.def( 
                "setCallback"
                , setCallback_function_value
                , ( bp::arg("callback") )
                , bp::release_gil_policy()
                , "Set the callback object.\nPar:am callback\nA Python object that contains the callback function.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::setCharges
        
            typedef void ( ::SireOpenMM::EMLEEngine::*setCharges_function_type)( ::QVector< double > ) ;
            setCharges_function_type setCharges_function_value( &::SireOpenMM::EMLEEngine::setCharges );
            
            EMLEEngine_exposer.def( 
                "setCharges"
                , setCharges_function_value
                , ( bp::arg("charges") )
                , bp::release_gil_policy()
                , "Set the atomic charges of all atoms in the system.\nPar:am charges\nA vector of atomic charges for all atoms in the system.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::setCutoff
        
            typedef void ( ::SireOpenMM::EMLEEngine::*setCutoff_function_type)( ::SireUnits::Dimension::Length ) ;
            setCutoff_function_type setCutoff_function_value( &::SireOpenMM::EMLEEngine::setCutoff );
            
            EMLEEngine_exposer.def( 
                "setCutoff"
                , setCutoff_function_value
                , ( bp::arg("cutoff") )
                , bp::release_gil_policy()
                , "Set the QM cutoff distance.\nPar:am cutoff\nThe QM cutoff distance.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::setLambda
        
            typedef void ( ::SireOpenMM::EMLEEngine::*setLambda_function_type)( double ) ;
            setLambda_function_type setLambda_function_value( &::SireOpenMM::EMLEEngine::setLambda );
            
            EMLEEngine_exposer.def( 
                "setLambda"
                , setLambda_function_value
                , ( bp::arg("lambda") )
                , bp::release_gil_policy()
                , "Set the lambda weighting factor.\nPar:am lambda\nThe lambda weighting factor.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::setLinkAtoms
        
            typedef void ( ::SireOpenMM::EMLEEngine::*setLinkAtoms_function_type)( ::QMap< int, int >,::QMap< int, QVector< int > >,::QMap< int, double > ) ;
            setLinkAtoms_function_type setLinkAtoms_function_value( &::SireOpenMM::EMLEEngine::setLinkAtoms );
            
            EMLEEngine_exposer.def( 
                "setLinkAtoms"
                , setLinkAtoms_function_value
                , ( bp::arg("mm1_to_qm"), bp::arg("mm1_to_mm2"), bp::arg("bond_scale_factors") )
                , bp::release_gil_policy()
                , "Set the link atoms associated with each QM atom.\nPar:am mm1_to_qm\nA dictionary mapping link atom (MM1) indices to the QM atoms to\nwhich they are bonded.\n\nPar:am mm1_to_mm2\nA dictionary of link atoms indices (MM1) to a list of the MM\natoms to which they are bonded (MM2).\n\nPar:am bond_scale_factors\nA dictionary of link atom indices (MM1) to a list of the bond\nlength scale factors between the QM and MM1 atoms. The scale\nfactors are the ratio of the equilibrium bond lengths for the\nQM-L (QM-link) atom and QM-MM1 atom, i.e. R0(QM-L)  R0(QM-MM1),\ntaken from the MM force field parameters for the molecule.\n\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::setNeighbourListFrequency
        
            typedef void ( ::SireOpenMM::EMLEEngine::*setNeighbourListFrequency_function_type)( int ) ;
            setNeighbourListFrequency_function_type setNeighbourListFrequency_function_value( &::SireOpenMM::EMLEEngine::setNeighbourListFrequency );
            
            EMLEEngine_exposer.def( 
                "setNeighbourListFrequency"
                , setNeighbourListFrequency_function_value
                , ( bp::arg("neighbour_list_frequency") )
                , bp::release_gil_policy()
                , "Set the neighbour list frequency.\nPar:am neighbour_list_frequency\nThe neighbour list frequency.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::setNumbers
        
            typedef void ( ::SireOpenMM::EMLEEngine::*setNumbers_function_type)( ::QVector< int > ) ;
            setNumbers_function_type setNumbers_function_value( &::SireOpenMM::EMLEEngine::setNumbers );
            
            EMLEEngine_exposer.def( 
                "setNumbers"
                , setNumbers_function_value
                , ( bp::arg("numbers") )
                , bp::release_gil_policy()
                , "Set the atomic numbers for the atoms in the QM region.\nPar:am numbers\nA vector of atomic numbers for the atoms in the QM region.\n" );
        
        }
        { //::SireOpenMM::EMLEEngine::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireOpenMM::EMLEEngine::typeName );
            
            EMLEEngine_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "Return the C++ name for this class." );
        
        }
        { //::SireOpenMM::EMLEEngine::what
        
            typedef char const * ( ::SireOpenMM::EMLEEngine::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireOpenMM::EMLEEngine::what );
            
            EMLEEngine_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "Return the C++ name for this class." );
        
        }
        EMLEEngine_exposer.staticmethod( "typeName" );
        EMLEEngine_exposer.def( "__copy__", &__copy__);
        EMLEEngine_exposer.def( "__deepcopy__", &__copy__);
        EMLEEngine_exposer.def( "clone", &__copy__);
        EMLEEngine_exposer.def( "__str__", &__str__< ::SireOpenMM::EMLEEngine > );
        EMLEEngine_exposer.def( "__repr__", &__str__< ::SireOpenMM::EMLEEngine > );
        EMLEEngine_exposer.def( "__str__", &__str__< ::SireOpenMM::EMLEEngine > );
        EMLEEngine_exposer.def( "__repr__", &__str__< ::SireOpenMM::EMLEEngine > );
    }

}
