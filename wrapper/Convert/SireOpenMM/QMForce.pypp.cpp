// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "QMForce.pypp.hpp"

namespace bp = boost::python;

#include "qmmm.h"

#include "qmmm.h"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

#include "qmmm.h"

#include "qmmm.h"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_QMForce_class(){

    { //::SireOpenMM::QMForce
        typedef bp::class_< SireOpenMM::QMForce, boost::noncopyable > QMForce_exposer_t;
        QMForce_exposer_t QMForce_exposer = QMForce_exposer_t( "QMForce", "", bp::no_init );
        bp::scope QMForce_scope( QMForce_exposer );
        { //::SireOpenMM::QMForce::getAtoms
        
            typedef ::QVector< int > ( ::SireOpenMM::QMForce::*getAtoms_function_type)(  ) const;
            getAtoms_function_type getAtoms_function_value( &::SireOpenMM::QMForce::getAtoms );
            
            QMForce_exposer.def( 
                "getAtoms"
                , getAtoms_function_value
                , bp::release_gil_policy()
                , "Get the indices of the atoms in the QM region." );
        
        }
        { //::SireOpenMM::QMForce::getCharges
        
            typedef ::QVector< double > ( ::SireOpenMM::QMForce::*getCharges_function_type)(  ) const;
            getCharges_function_type getCharges_function_value( &::SireOpenMM::QMForce::getCharges );
            
            QMForce_exposer.def( 
                "getCharges"
                , getCharges_function_value
                , bp::release_gil_policy()
                , "Get the atomic charges of all atoms in the system." );
        
        }
        { //::SireOpenMM::QMForce::getCutoff
        
            typedef ::SireUnits::Dimension::Length ( ::SireOpenMM::QMForce::*getCutoff_function_type)(  ) const;
            getCutoff_function_type getCutoff_function_value( &::SireOpenMM::QMForce::getCutoff );
            
            QMForce_exposer.def( 
                "getCutoff"
                , getCutoff_function_value
                , bp::release_gil_policy()
                , "Get the QM cutoff distance." );
        
        }
        { //::SireOpenMM::QMForce::getLambda
        
            typedef double ( ::SireOpenMM::QMForce::*getLambda_function_type)(  ) const;
            getLambda_function_type getLambda_function_value( &::SireOpenMM::QMForce::getLambda );
            
            QMForce_exposer.def( 
                "getLambda"
                , getLambda_function_value
                , bp::release_gil_policy()
                , "Get the lambda weighting factor." );
        
        }
        { //::SireOpenMM::QMForce::getLinkAtoms
        
            typedef ::boost::tuples::tuple< QMap< int, int >, QMap< int, QVector< int > >, QMap< int, double >, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type, boost::tuples::null_type > ( ::SireOpenMM::QMForce::*getLinkAtoms_function_type)(  ) const;
            getLinkAtoms_function_type getLinkAtoms_function_value( &::SireOpenMM::QMForce::getLinkAtoms );
            
            QMForce_exposer.def( 
                "getLinkAtoms"
                , getLinkAtoms_function_value
                , bp::release_gil_policy()
                , "Get the link atoms associated with each QM atom." );
        
        }
        { //::SireOpenMM::QMForce::getNumbers
        
            typedef ::QVector< int > ( ::SireOpenMM::QMForce::*getNumbers_function_type)(  ) const;
            getNumbers_function_type getNumbers_function_value( &::SireOpenMM::QMForce::getNumbers );
            
            QMForce_exposer.def( 
                "getNumbers"
                , getNumbers_function_value
                , bp::release_gil_policy()
                , "Get the atomic numbers of the atoms in the QM region." );
        
        }
        { //::SireOpenMM::QMForce::setAtoms
        
            typedef void ( ::SireOpenMM::QMForce::*setAtoms_function_type)( ::QVector< int > ) ;
            setAtoms_function_type setAtoms_function_value( &::SireOpenMM::QMForce::setAtoms );
            
            QMForce_exposer.def( 
                "setAtoms"
                , setAtoms_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the list of atom indices for the QM region." );
        
        }
        { //::SireOpenMM::QMForce::setCharges
        
            typedef void ( ::SireOpenMM::QMForce::*setCharges_function_type)( ::QVector< double > ) ;
            setCharges_function_type setCharges_function_value( &::SireOpenMM::QMForce::setCharges );
            
            QMForce_exposer.def( 
                "setCharges"
                , setCharges_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the atomic charges of all atoms in the system." );
        
        }
        { //::SireOpenMM::QMForce::setCutoff
        
            typedef void ( ::SireOpenMM::QMForce::*setCutoff_function_type)( ::SireUnits::Dimension::Length ) ;
            setCutoff_function_type setCutoff_function_value( &::SireOpenMM::QMForce::setCutoff );
            
            QMForce_exposer.def( 
                "setCutoff"
                , setCutoff_function_value
                , ( bp::arg("cutoff") )
                , bp::release_gil_policy()
                , "Set the QM cutoff distance." );
        
        }
        { //::SireOpenMM::QMForce::setLambda
        
            typedef void ( ::SireOpenMM::QMForce::*setLambda_function_type)( double ) ;
            setLambda_function_type setLambda_function_value( &::SireOpenMM::QMForce::setLambda );
            
            QMForce_exposer.def( 
                "setLambda"
                , setLambda_function_value
                , ( bp::arg("lambda") )
                , bp::release_gil_policy()
                , "Set the lambda weighting factor." );
        
        }
        { //::SireOpenMM::QMForce::setLinkAtoms
        
            typedef void ( ::SireOpenMM::QMForce::*setLinkAtoms_function_type)( ::QMap< int, int >,::QMap< int, QVector< int > >,::QMap< int, double > ) ;
            setLinkAtoms_function_type setLinkAtoms_function_value( &::SireOpenMM::QMForce::setLinkAtoms );
            
            QMForce_exposer.def( 
                "setLinkAtoms"
                , setLinkAtoms_function_value
                , ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") )
                , bp::release_gil_policy()
                , "Set the link atoms associated with each QM atom." );
        
        }
        { //::SireOpenMM::QMForce::setNumbers
        
            typedef void ( ::SireOpenMM::QMForce::*setNumbers_function_type)( ::QVector< int > ) ;
            setNumbers_function_type setNumbers_function_value( &::SireOpenMM::QMForce::setNumbers );
            
            QMForce_exposer.def( 
                "setNumbers"
                , setNumbers_function_value
                , ( bp::arg("arg0") )
                , bp::release_gil_policy()
                , "Set the list of atomic numbers for the QM region." );
        
        }
        QMForce_exposer.def( "__str__", &__str__< ::SireOpenMM::QMForce > );
        QMForce_exposer.def( "__repr__", &__str__< ::SireOpenMM::QMForce > );
        QMForce_exposer.def( "__str__", &__str__< ::SireOpenMM::QMForce > );
        QMForce_exposer.def( "__repr__", &__str__< ::SireOpenMM::QMForce > );
    }

}
