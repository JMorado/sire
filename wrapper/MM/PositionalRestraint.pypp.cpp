// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "PositionalRestraint.pypp.hpp"

namespace bp = boost::python;

#include "SireError/errors.h"

#include "SireID/index.h"

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "SireUnits/units.h"

#include "positionalrestraints.h"

#include "positionalrestraints.h"

SireMM::PositionalRestraint __copy__(const SireMM::PositionalRestraint &other){ return SireMM::PositionalRestraint(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_PositionalRestraint_class(){

    { //::SireMM::PositionalRestraint
        typedef bp::class_< SireMM::PositionalRestraint, bp::bases< SireBase::Property > > PositionalRestraint_exposer_t;
        PositionalRestraint_exposer_t PositionalRestraint_exposer = PositionalRestraint_exposer_t( "PositionalRestraint", "This class provides information about a single positional restraint.\nThis is spherically symmetric and can act on either a single particle,\nor the centroid of a group of particles. The restraints are either\nflat-bottom harmonics or harmonic potentials\n", bp::init< >("Null constructor") );
        bp::scope PositionalRestraint_scope( PositionalRestraint_exposer );
        PositionalRestraint_exposer.def( bp::init< qint64, SireMaths::Vector const &, SireUnits::Dimension::GeneralUnit const &, SireUnits::Dimension::Length const & >(( bp::arg("atom"), bp::arg("position"), bp::arg("k"), bp::arg("r0") ), "Construct to restrain the atom at index atom to the specified position\n  using the specified force constant and flat-bottom well-width\n") );
        PositionalRestraint_exposer.def( bp::init< QList< long long > const &, SireMaths::Vector const &, SireUnits::Dimension::GeneralUnit const &, SireUnits::Dimension::Length const & >(( bp::arg("atoms"), bp::arg("position"), bp::arg("k"), bp::arg("r0") ), "Construct to restrain the centroid of the atoms whose indicies are\n  in atoms to the specified position using the specified force constant\n  and flat-bottom well width\n") );
        PositionalRestraint_exposer.def( bp::init< SireMM::PositionalRestraint const & >(( bp::arg("other") ), "Copy constructor") );
        { //::SireMM::PositionalRestraint::atom
        
            typedef ::qint64 ( ::SireMM::PositionalRestraint::*atom_function_type)(  ) const;
            atom_function_type atom_function_value( &::SireMM::PositionalRestraint::atom );
            
            PositionalRestraint_exposer.def( 
                "atom"
                , atom_function_value
                , bp::release_gil_policy()
                , "Return the index of the atom if this is a single-atom restraint" );
        
        }
        { //::SireMM::PositionalRestraint::atoms
        
            typedef ::QVector< long long > ( ::SireMM::PositionalRestraint::*atoms_function_type)(  ) const;
            atoms_function_type atoms_function_value( &::SireMM::PositionalRestraint::atoms );
            
            PositionalRestraint_exposer.def( 
                "atoms"
                , atoms_function_value
                , bp::release_gil_policy()
                , "Return the indexes of the atoms whose centroid is to be restrained" );
        
        }
        { //::SireMM::PositionalRestraint::isAtomRestraint
        
            typedef bool ( ::SireMM::PositionalRestraint::*isAtomRestraint_function_type)(  ) const;
            isAtomRestraint_function_type isAtomRestraint_function_value( &::SireMM::PositionalRestraint::isAtomRestraint );
            
            PositionalRestraint_exposer.def( 
                "isAtomRestraint"
                , isAtomRestraint_function_value
                , bp::release_gil_policy()
                , "Return whether this is a single-atom restraint" );
        
        }
        { //::SireMM::PositionalRestraint::isCentroidRestraint
        
            typedef bool ( ::SireMM::PositionalRestraint::*isCentroidRestraint_function_type)(  ) const;
            isCentroidRestraint_function_type isCentroidRestraint_function_value( &::SireMM::PositionalRestraint::isCentroidRestraint );
            
            PositionalRestraint_exposer.def( 
                "isCentroidRestraint"
                , isCentroidRestraint_function_value
                , bp::release_gil_policy()
                , "Return whether this restraint acts on the centroid of a group\n  of atoms" );
        
        }
        { //::SireMM::PositionalRestraint::isNull
        
            typedef bool ( ::SireMM::PositionalRestraint::*isNull_function_type)(  ) const;
            isNull_function_type isNull_function_value( &::SireMM::PositionalRestraint::isNull );
            
            PositionalRestraint_exposer.def( 
                "isNull"
                , isNull_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::PositionalRestraint::k
        
            typedef ::SireUnits::Dimension::GeneralUnit ( ::SireMM::PositionalRestraint::*k_function_type)(  ) const;
            k_function_type k_function_value( &::SireMM::PositionalRestraint::k );
            
            PositionalRestraint_exposer.def( 
                "k"
                , k_function_value
                , bp::release_gil_policy()
                , "Return the force constant for the restraint" );
        
        }
        PositionalRestraint_exposer.def( bp::self != bp::self );
        PositionalRestraint_exposer.def( bp::self + bp::self );
        PositionalRestraint_exposer.def( bp::self + bp::other< SireMM::PositionalRestraints >() );
        { //::SireMM::PositionalRestraint::operator=
        
            typedef ::SireMM::PositionalRestraint & ( ::SireMM::PositionalRestraint::*assign_function_type)( ::SireMM::PositionalRestraint const & ) ;
            assign_function_type assign_function_value( &::SireMM::PositionalRestraint::operator= );
            
            PositionalRestraint_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        PositionalRestraint_exposer.def( bp::self == bp::self );
        { //::SireMM::PositionalRestraint::position
        
            typedef ::SireMaths::Vector ( ::SireMM::PositionalRestraint::*position_function_type)(  ) const;
            position_function_type position_function_value( &::SireMM::PositionalRestraint::position );
            
            PositionalRestraint_exposer.def( 
                "position"
                , position_function_value
                , bp::release_gil_policy()
                , "Return the position in space where the restraint is placed" );
        
        }
        { //::SireMM::PositionalRestraint::r0
        
            typedef ::SireUnits::Dimension::Length ( ::SireMM::PositionalRestraint::*r0_function_type)(  ) const;
            r0_function_type r0_function_value( &::SireMM::PositionalRestraint::r0 );
            
            PositionalRestraint_exposer.def( 
                "r0"
                , r0_function_value
                , bp::release_gil_policy()
                , "Return the width of the flat-bottom well. This is zero for a\n  pure harmonic restraint\n" );
        
        }
        { //::SireMM::PositionalRestraint::toString
        
            typedef ::QString ( ::SireMM::PositionalRestraint::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMM::PositionalRestraint::toString );
            
            PositionalRestraint_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::PositionalRestraint::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::PositionalRestraint::typeName );
            
            PositionalRestraint_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::PositionalRestraint::what
        
            typedef char const * ( ::SireMM::PositionalRestraint::*what_function_type)(  ) const;
            what_function_type what_function_value( &::SireMM::PositionalRestraint::what );
            
            PositionalRestraint_exposer.def( 
                "what"
                , what_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        PositionalRestraint_exposer.staticmethod( "typeName" );
        PositionalRestraint_exposer.def( "__copy__", &__copy__);
        PositionalRestraint_exposer.def( "__deepcopy__", &__copy__);
        PositionalRestraint_exposer.def( "clone", &__copy__);
        PositionalRestraint_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::PositionalRestraint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PositionalRestraint_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::PositionalRestraint >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        PositionalRestraint_exposer.def_pickle(sire_pickle_suite< ::SireMM::PositionalRestraint >());
        PositionalRestraint_exposer.def( "__str__", &__str__< ::SireMM::PositionalRestraint > );
        PositionalRestraint_exposer.def( "__repr__", &__str__< ::SireMM::PositionalRestraint > );
    }

}
