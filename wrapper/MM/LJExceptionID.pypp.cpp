// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "LJExceptionID.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/quickcopy.hpp"

#include "SireStream/datastream.h"

#include "SireStream/magic_error.h"

#include "SireStream/shareddatastream.h"

#include "atomljs.h"

#include "atomljs.h"

SireMM::LJExceptionID __copy__(const SireMM::LJExceptionID &other){ return SireMM::LJExceptionID(other); }

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_LJExceptionID_class(){

    { //::SireMM::LJExceptionID
        typedef bp::class_< SireMM::LJExceptionID > LJExceptionID_exposer_t;
        LJExceptionID_exposer_t LJExceptionID_exposer = LJExceptionID_exposer_t( "LJExceptionID", "This is a simple ID number that is used to match up LJ exceptions\nacross different molecules. Each pair of atom-pair exceptions will\nhave thier own ID number, and will recognise each other by this\nnumber. Note that this number is per-session, and will be changed\nwhen a molecule is streamed and re-loaded\n", bp::init< >("") );
        bp::scope LJExceptionID_scope( LJExceptionID_exposer );
        LJExceptionID_exposer.def( bp::init< SireMM::LJExceptionID const & >(( bp::arg("other") ), "") );
        { //::SireMM::LJExceptionID::generate
        
            typedef ::SireMM::LJExceptionID ( *generate_function_type )(  );
            generate_function_type generate_function_value( &::SireMM::LJExceptionID::generate );
            
            LJExceptionID_exposer.def( 
                "generate"
                , generate_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        { //::SireMM::LJExceptionID::hash
        
            typedef ::quint64 ( ::SireMM::LJExceptionID::*hash_function_type)(  ) const;
            hash_function_type hash_function_value( &::SireMM::LJExceptionID::hash );
            
            LJExceptionID_exposer.def( 
                "hash"
                , hash_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        LJExceptionID_exposer.def( bp::self != bp::self );
        { //::SireMM::LJExceptionID::operator=
        
            typedef ::SireMM::LJExceptionID & ( ::SireMM::LJExceptionID::*assign_function_type)( ::SireMM::LJExceptionID const & ) ;
            assign_function_type assign_function_value( &::SireMM::LJExceptionID::operator= );
            
            LJExceptionID_exposer.def( 
                "assign"
                , assign_function_value
                , ( bp::arg("other") )
                , bp::return_self< >()
                , "" );
        
        }
        LJExceptionID_exposer.def( bp::self == bp::self );
        { //::SireMM::LJExceptionID::toString
        
            typedef ::QString ( ::SireMM::LJExceptionID::*toString_function_type)(  ) const;
            toString_function_type toString_function_value( &::SireMM::LJExceptionID::toString );
            
            LJExceptionID_exposer.def( 
                "toString"
                , toString_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        LJExceptionID_exposer.staticmethod( "generate" );
        LJExceptionID_exposer.def( "__copy__", &__copy__);
        LJExceptionID_exposer.def( "__deepcopy__", &__copy__);
        LJExceptionID_exposer.def( "clone", &__copy__);
        LJExceptionID_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::LJExceptionID >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        LJExceptionID_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::LJExceptionID >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        LJExceptionID_exposer.def_pickle(sire_pickle_suite< ::SireMM::LJExceptionID >());
        LJExceptionID_exposer.def( "__str__", &__str__< ::SireMM::LJExceptionID > );
        LJExceptionID_exposer.def( "__repr__", &__str__< ::SireMM::LJExceptionID > );
        LJExceptionID_exposer.def( "__hash__", &::SireMM::LJExceptionID::hash );
    }

}
