// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "Restraints.pypp.hpp"

namespace bp = boost::python;

#include "SireStream/datastream.h"

#include "SireStream/shareddatastream.h"

#include "restraints.h"

#include "restraints.h"

#include "Qt/qdatastream.hpp"

#include "Helpers/str.hpp"

#include "Helpers/release_gil_policy.hpp"

void register_Restraints_class(){

    { //::SireMM::Restraints
        typedef bp::class_< SireMM::Restraints, bp::bases< SireBase::Property >, boost::noncopyable > Restraints_exposer_t;
        Restraints_exposer_t Restraints_exposer = Restraints_exposer_t( "Restraints", "This is the base class of all of the `Restraints` collections,\ne.g. PositionalRestraints, BoreschRestraints etc.\n\nThese are not related to the legacy SireMM::Restraint classes,\nwhich calculate restraints directly. Instead, these classes\nprovide information about the restraints that can be picked\nup and used by different engines (e.g. OpenMM)\n", bp::no_init );
        bp::scope Restraints_scope( Restraints_exposer );
        { //::SireMM::Restraints::isRestraints
        
            typedef bool ( ::SireMM::Restraints::*isRestraints_function_type)(  ) const;
            isRestraints_function_type isRestraints_function_value( &::SireMM::Restraints::isRestraints );
            
            Restraints_exposer.def( 
                "isRestraints"
                , isRestraints_function_value
                , bp::release_gil_policy()
                , "Return whether or not this is a Restraints object (or derived\nfrom this object)" );
        
        }
        { //::SireMM::Restraints::name
        
            typedef ::QString ( ::SireMM::Restraints::*name_function_type)(  ) const;
            name_function_type name_function_value( &::SireMM::Restraints::name );
            
            Restraints_exposer.def( 
                "name"
                , name_function_value
                , bp::release_gil_policy()
                , "Return the name given to this group of restraints" );
        
        }
        { //::SireMM::Restraints::setName
        
            typedef void ( ::SireMM::Restraints::*setName_function_type)( ::QString const & ) ;
            setName_function_type setName_function_value( &::SireMM::Restraints::setName );
            
            Restraints_exposer.def( 
                "setName"
                , setName_function_value
                , ( bp::arg("name") )
                , bp::release_gil_policy()
                , "Set the name for this group of restraints" );
        
        }
        { //::SireMM::Restraints::typeName
        
            typedef char const * ( *typeName_function_type )(  );
            typeName_function_type typeName_function_value( &::SireMM::Restraints::typeName );
            
            Restraints_exposer.def( 
                "typeName"
                , typeName_function_value
                , bp::release_gil_policy()
                , "" );
        
        }
        Restraints_exposer.staticmethod( "typeName" );
        Restraints_exposer.def( "__rlshift__", &__rlshift__QDataStream< ::SireMM::Restraints >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Restraints_exposer.def( "__rrshift__", &__rrshift__QDataStream< ::SireMM::Restraints >,
                            bp::return_internal_reference<1, bp::with_custodian_and_ward<1,2> >() );
        Restraints_exposer.def_pickle(sire_pickle_suite< ::SireMM::Restraints >());
        Restraints_exposer.def( "__str__", &__str__< ::SireMM::Restraints > );
        Restraints_exposer.def( "__repr__", &__str__< ::SireMM::Restraints > );
    }

}
