// This file has been generated by Py++.

// (C) Christopher Woods, GPL >= 3 License

#include "boost/python.hpp"
#include "_System_free_functions.pypp.hpp"

namespace bp = boost::python;

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireBase/generalunitproperty.h"

#include "SireBase/parallel.h"

#include "SireBase/progressbar.h"

#include "SireBase/releasegil.h"

#include "SireMM/cljrffunction.h"

#include "SireMM/cljshiftfunction.h"

#include "SireMM/interff.h"

#include "SireMM/intergroupff.h"

#include "SireMM/internalff.h"

#include "SireMM/internalgroupff.h"

#include "SireMM/intraff.h"

#include "SireMM/intragroupff.h"

#include "SireMM/mmdetail.h"

#include "SireMol/core.h"

#include "SireSystem/forcefieldinfo.h"

#include "SireUnits/units.h"

#include "calculate_energy.h"

#include <QDebug>

#include "calculate_energy.h"

#include "SireMol/atomcharges.h"

#include "SireMol/atommasses.h"

#include "SireMol/atomname.h"

#include "SireMol/atomnum.h"

#include "SireMol/cgname.h"

#include "SireMol/chainname.h"

#include "SireMol/core.h"

#include "SireMol/molecule.h"

#include "SireMol/moleditor.h"

#include "SireMol/mover.hpp"

#include "SireMol/resname.h"

#include "SireMol/resnum.h"

#include "SireMol/segname.h"

#include "create_test_molecule.h"

#include "create_test_molecule.h"

#include "SireMM/mmdetail.h"

#include "SireMol/atomidxmapping.h"

#include "SireMol/core.h"

#include "SireMol/moleditor.h"

#include "SireSystem/merge.h"

#include "merge.h"

#include "merge.h"

void register_free_functions(){

    { //::SireSystem::calculate_energy
    
        typedef ::SireUnits::Dimension::GeneralUnit ( *calculate_energy_function_type )( ::SireFF::ForceFields & );
        calculate_energy_function_type calculate_energy_function_value( &::SireSystem::calculate_energy );
        
        bp::def( 
            "calculate_energy"
            , calculate_energy_function_value
            , ( bp::arg("ffields") )
            , "" );
    
    }

    { //::SireSystem::calculate_energy
    
        typedef ::SireUnits::Dimension::GeneralUnit ( *calculate_energy_function_type )( ::SireMol::MoleculeView const & );
        calculate_energy_function_type calculate_energy_function_value( &::SireSystem::calculate_energy );
        
        bp::def( 
            "calculate_energy"
            , calculate_energy_function_value
            , ( bp::arg("mol") )
            , "" );
    
    }

    { //::SireSystem::calculate_energy
    
        typedef ::SireUnits::Dimension::GeneralUnit ( *calculate_energy_function_type )( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const & );
        calculate_energy_function_type calculate_energy_function_value( &::SireSystem::calculate_energy );
        
        bp::def( 
            "calculate_energy"
            , calculate_energy_function_value
            , ( bp::arg("mol"), bp::arg("map") )
            , "" );
    
    }

    { //::SireSystem::calculate_energy
    
        typedef ::SireUnits::Dimension::GeneralUnit ( *calculate_energy_function_type )( ::SireMol::Molecules const & );
        calculate_energy_function_type calculate_energy_function_value( &::SireSystem::calculate_energy );
        
        bp::def( 
            "calculate_energy"
            , calculate_energy_function_value
            , ( bp::arg("mols") )
            , "" );
    
    }

    { //::SireSystem::calculate_energy
    
        typedef ::SireUnits::Dimension::GeneralUnit ( *calculate_energy_function_type )( ::SireMol::Molecules const &,::SireBase::PropertyMap const & );
        calculate_energy_function_type calculate_energy_function_value( &::SireSystem::calculate_energy );
        
        bp::def( 
            "calculate_energy"
            , calculate_energy_function_value
            , ( bp::arg("mols"), bp::arg("map") )
            , "" );
    
    }

    { //::SireSystem::calculate_energy
    
        typedef ::SireUnits::Dimension::GeneralUnit ( *calculate_energy_function_type )( ::SireMol::MoleculeView const &,::SireMol::MoleculeView const & );
        calculate_energy_function_type calculate_energy_function_value( &::SireSystem::calculate_energy );
        
        bp::def( 
            "calculate_energy"
            , calculate_energy_function_value
            , ( bp::arg("mol0"), bp::arg("mol1") )
            , "" );
    
    }

    { //::SireSystem::calculate_energy
    
        typedef ::SireUnits::Dimension::GeneralUnit ( *calculate_energy_function_type )( ::SireMol::MoleculeView const &,::SireMol::Molecules const & );
        calculate_energy_function_type calculate_energy_function_value( &::SireSystem::calculate_energy );
        
        bp::def( 
            "calculate_energy"
            , calculate_energy_function_value
            , ( bp::arg("mol0"), bp::arg("mols1") )
            , "" );
    
    }

    { //::SireSystem::calculate_energy
    
        typedef ::SireUnits::Dimension::GeneralUnit ( *calculate_energy_function_type )( ::SireMol::Molecules const &,::SireMol::Molecules const & );
        calculate_energy_function_type calculate_energy_function_value( &::SireSystem::calculate_energy );
        
        bp::def( 
            "calculate_energy"
            , calculate_energy_function_value
            , ( bp::arg("mols0"), bp::arg("mols1") )
            , "" );
    
    }

    { //::SireSystem::calculate_energy
    
        typedef ::SireUnits::Dimension::GeneralUnit ( *calculate_energy_function_type )( ::SireMol::MoleculeView const &,::SireMol::MoleculeView const &,::SireBase::PropertyMap const & );
        calculate_energy_function_type calculate_energy_function_value( &::SireSystem::calculate_energy );
        
        bp::def( 
            "calculate_energy"
            , calculate_energy_function_value
            , ( bp::arg("mol0"), bp::arg("mol1"), bp::arg("map") )
            , "" );
    
    }

    { //::SireSystem::calculate_energy
    
        typedef ::SireUnits::Dimension::GeneralUnit ( *calculate_energy_function_type )( ::SireMol::MoleculeView const &,::SireMol::Molecules const &,::SireBase::PropertyMap const & );
        calculate_energy_function_type calculate_energy_function_value( &::SireSystem::calculate_energy );
        
        bp::def( 
            "calculate_energy"
            , calculate_energy_function_value
            , ( bp::arg("mol0"), bp::arg("mols1"), bp::arg("map") )
            , "" );
    
    }

    { //::SireSystem::calculate_energy
    
        typedef ::SireUnits::Dimension::GeneralUnit ( *calculate_energy_function_type )( ::SireMol::Molecules const &,::SireMol::Molecules const &,::SireBase::PropertyMap const & );
        calculate_energy_function_type calculate_energy_function_value( &::SireSystem::calculate_energy );
        
        bp::def( 
            "calculate_energy"
            , calculate_energy_function_value
            , ( bp::arg("mols0"), bp::arg("mols1"), bp::arg("map") )
            , "" );
    
    }

    { //::SireSystem::calculate_trajectory_energies
    
        typedef ::QVector< QVector< SireUnits::Dimension::GeneralUnit > > ( *calculate_trajectory_energies_function_type )( ::QVector< SireFF::ForceFields > const &,::QList< long long > const &,::SireBase::PropertyMap const & );
        calculate_trajectory_energies_function_type calculate_trajectory_energies_function_value( &::SireSystem::calculate_trajectory_energies );
        
        bp::def( 
            "calculate_trajectory_energies"
            , calculate_trajectory_energies_function_value
            , ( bp::arg("ff"), bp::arg("frames"), bp::arg("map") )
            , "" );
    
    }

    { //::SireSystem::calculate_trajectory_energy
    
        typedef ::QVector< SireUnits::Dimension::GeneralUnit > ( *calculate_trajectory_energy_function_type )( ::SireFF::ForceFields const &,::QList< long long > const &,::SireBase::PropertyMap const & );
        calculate_trajectory_energy_function_type calculate_trajectory_energy_function_value( &::SireSystem::calculate_trajectory_energy );
        
        bp::def( 
            "calculate_trajectory_energy"
            , calculate_trajectory_energy_function_value
            , ( bp::arg("ff"), bp::arg("frames"), bp::arg("map") )
            , "" );
    
    }

    { //::SireSystem::create_forcefield
    
        typedef ::SireFF::ForceFields ( *create_forcefield_function_type )( ::SireMol::MoleculeView const &,::SireBase::PropertyMap const & );
        create_forcefield_function_type create_forcefield_function_value( &::SireSystem::create_forcefield );
        
        bp::def( 
            "create_forcefield"
            , create_forcefield_function_value
            , ( bp::arg("mol"), bp::arg("map") )
            , "" );
    
    }

    { //::SireSystem::create_forcefield
    
        typedef ::SireFF::ForceFields ( *create_forcefield_function_type )( ::SireMol::Molecules const &,::SireBase::PropertyMap const & );
        create_forcefield_function_type create_forcefield_function_value( &::SireSystem::create_forcefield );
        
        bp::def( 
            "create_forcefield"
            , create_forcefield_function_value
            , ( bp::arg("mols"), bp::arg("map") )
            , "" );
    
    }

    { //::SireSystem::create_forcefield
    
        typedef ::SireFF::ForceFields ( *create_forcefield_function_type )( ::SireMol::MoleculeView const &,::SireMol::MoleculeView const &,::SireBase::PropertyMap const & );
        create_forcefield_function_type create_forcefield_function_value( &::SireSystem::create_forcefield );
        
        bp::def( 
            "create_forcefield"
            , create_forcefield_function_value
            , ( bp::arg("mol0"), bp::arg("mol1"), bp::arg("map") )
            , "" );
    
    }

    { //::SireSystem::create_forcefield
    
        typedef ::SireFF::ForceFields ( *create_forcefield_function_type )( ::SireMol::MoleculeView const &,::SireMol::Molecules const &,::SireBase::PropertyMap const & );
        create_forcefield_function_type create_forcefield_function_value( &::SireSystem::create_forcefield );
        
        bp::def( 
            "create_forcefield"
            , create_forcefield_function_value
            , ( bp::arg("mol0"), bp::arg("mols1"), bp::arg("map") )
            , "" );
    
    }

    { //::SireSystem::create_forcefield
    
        typedef ::SireFF::ForceFields ( *create_forcefield_function_type )( ::SireMol::Molecules const &,::SireMol::Molecules const &,::SireBase::PropertyMap const & );
        create_forcefield_function_type create_forcefield_function_value( &::SireSystem::create_forcefield );
        
        bp::def( 
            "create_forcefield"
            , create_forcefield_function_value
            , ( bp::arg("mols0"), bp::arg("mols1"), bp::arg("map") )
            , "" );
    
    }

    { //::SireSystem::create_test_molecule
    
        typedef ::SireMol::Molecule ( *create_test_molecule_function_type )(  );
        create_test_molecule_function_type create_test_molecule_function_value( &::SireSystem::create_test_molecule );
        
        bp::def( 
            "create_test_molecule"
            , create_test_molecule_function_value
            , "" );
    
    }

    { //::SireSystem::merge
    
        typedef ::SireMol::Molecule ( *merge_function_type )( ::SireMol::AtomMapping const &,::QStringList const &,bool,bool,bool,bool,::SireBase::PropertyMap const & );
        merge_function_type merge_function_value( &::SireSystem::merge );
        
        bp::def( 
            "merge"
            , merge_function_value
            , ( bp::arg("mols"), bp::arg("properties")=::QStringList( ), bp::arg("as_new_molecule")=(bool)(true), bp::arg("allow_ring_breaking")=(bool)(false), bp::arg("allow_ring_size_change")=(bool)(false), bp::arg("force")=(bool)(false), bp::arg("map")=SireBase::PropertyMap() )
            , "" );
    
    }

}
